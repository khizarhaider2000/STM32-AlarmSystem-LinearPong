
CEG3136_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db0  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08001fa0  08001fa0  00002fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800209c  0800209c  000041b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800209c  0800209c  000041b0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800209c  0800209c  000041b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800209c  0800209c  0000309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020a0  080020a0  000030a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  080020a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001b0  08002254  000041b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08002254  000043dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030dc  00000000  00000000  000041e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c83  00000000  00000000  000072c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00007f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000191  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f3d  00000000  00000000  00008319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000378b  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af9de  00000000  00000000  0000c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc3bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  000bc404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000bd094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001b0 	.word	0x200001b0
 800020c:	00000000 	.word	0x00000000
 8000210:	08001f88 	.word	0x08001f88

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001b4 	.word	0x200001b4
 800022c:	08001f88 	.word	0x08001f88

08000230 <DisplayEnable>:
static I2C_Xfer_t DispLine[ROWS] = {
    {&LeafyI2C, 0x7C, (void *)&txLine[0], 19, 1, 0, NULL},
    {&LeafyI2C, 0x7C, (void *)&txLine[1], 19, 1, 0, NULL}
};
// Enable LCD display
void DisplayEnable(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af02      	add	r7, sp, #8
    I2C_Enable(LeafyI2C);
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <DisplayEnable+0x20>)
 8000238:	691a      	ldr	r2, [r3, #16]
 800023a:	9200      	str	r2, [sp, #0]
 800023c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800023e:	f000 ffa1 	bl	8001184 <I2C_Enable>
    I2C_Request(&DispInit);
 8000242:	4804      	ldr	r0, [pc, #16]	@ (8000254 <DisplayEnable+0x24>)
 8000244:	f001 f826 	bl	8001294 <I2C_Request>
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000148 	.word	0x20000148
 8000254:	20000028 	.word	0x20000028

08000258 <DisplayPrint>:

// Print a line of text with optional format specifiers
void DisplayPrint(const int line, const char *msg, ...) {
 8000258:	b40e      	push	{r1, r2, r3}
 800025a:	b580      	push	{r7, lr}
 800025c:	b087      	sub	sp, #28
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, msg);
 8000262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000266:	60fb      	str	r3, [r7, #12]

    // Full buffer with formatted text and space pad the remainder
    int chars = vsnprintf((char *)txLine[line].text, COLS + 1, msg, args);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4613      	mov	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	4413      	add	r3, r2
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <DisplayPrint+0x70>)
 8000274:	4413      	add	r3, r2
 8000276:	1cd8      	adds	r0, r3, #3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800027c:	2111      	movs	r1, #17
 800027e:	f001 f9ed 	bl	800165c <vsniprintf>
 8000282:	6138      	str	r0, [r7, #16]
    for (int i = chars; i < COLS; i++)
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e00e      	b.n	80002a8 <DisplayPrint+0x50>
        txLine[line].text[i] = ' ';
 800028a:	490f      	ldr	r1, [pc, #60]	@ (80002c8 <DisplayPrint+0x70>)
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4613      	mov	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	4413      	add	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	18ca      	adds	r2, r1, r3
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	4413      	add	r3, r2
 800029c:	3303      	adds	r3, #3
 800029e:	2220      	movs	r2, #32
 80002a0:	701a      	strb	r2, [r3, #0]
    for (int i = chars; i < COLS; i++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	2b0f      	cmp	r3, #15
 80002ac:	dded      	ble.n	800028a <DisplayPrint+0x32>

    updateLine[line] = true;
 80002ae:	4a07      	ldr	r2, [pc, #28]	@ (80002cc <DisplayPrint+0x74>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
    va_end(args);
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002c2:	b003      	add	sp, #12
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000000 	.word	0x20000000
 80002cc:	200001cc 	.word	0x200001cc

080002d0 <DisplayColor>:
static I2C_Xfer_t BltRed   = {&LeafyI2C, 0x5A, (void *)&txRed,   2, 1, 0, NULL};
static I2C_Xfer_t BltGreen = {&LeafyI2C, 0x5A, (void *)&txGreen, 2, 1, 0, NULL};
static I2C_Xfer_t BltBlue  = {&LeafyI2C, 0x5A, (void *)&txBlue,  2, 1, 0, NULL};

// Set new backlight color
void DisplayColor(Color_t color) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    txRed.data   = (color >> 16) & 0xFF;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	0c1b      	lsrs	r3, r3, #16
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <DisplayColor+0x38>)
 80002e0:	705a      	strb	r2, [r3, #1]
    txGreen.data = (color >> 8)  & 0xFF;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <DisplayColor+0x3c>)
 80002ea:	705a      	strb	r2, [r3, #1]
    txBlue.data  = (color >> 0)  & 0xFF;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <DisplayColor+0x40>)
 80002f2:	705a      	strb	r2, [r3, #1]
    updateBlt = true;
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <DisplayColor+0x44>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000070 	.word	0x20000070
 800030c:	20000074 	.word	0x20000074
 8000310:	20000078 	.word	0x20000078
 8000314:	2000007a 	.word	0x2000007a

08000318 <UpdateDisplay>:

// --------------------------------------------------------
// Automatic background updates
// --------------------------------------------------------
// Called from main loop
void UpdateDisplay(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
    for (int i = 0; i < ROWS; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e025      	b.n	8000370 <UpdateDisplay+0x58>
        if (!DispLine[i].busy && updateLine[i]) {
 8000324:	4921      	ldr	r1, [pc, #132]	@ (80003ac <UpdateDisplay+0x94>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4613      	mov	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	3311      	adds	r3, #17
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	f083 0301 	eor.w	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	2b00      	cmp	r3, #0
 800033e:	d014      	beq.n	800036a <UpdateDisplay+0x52>
 8000340:	4a1b      	ldr	r2, [pc, #108]	@ (80003b0 <UpdateDisplay+0x98>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00e      	beq.n	800036a <UpdateDisplay+0x52>
            updateLine[i] = false;
 800034c:	4a18      	ldr	r2, [pc, #96]	@ (80003b0 <UpdateDisplay+0x98>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
            I2C_Request(&DispLine[i]);
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	4a12      	ldr	r2, [pc, #72]	@ (80003ac <UpdateDisplay+0x94>)
 8000362:	4413      	add	r3, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 ff95 	bl	8001294 <I2C_Request>
    for (int i = 0; i < ROWS; i++)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	ddd6      	ble.n	8000324 <UpdateDisplay+0xc>
        }

    if (!BltBlue.busy && updateBlt) {
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <UpdateDisplay+0x9c>)
 8000378:	7c5b      	ldrb	r3, [r3, #17]
 800037a:	f083 0301 	eor.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00f      	beq.n	80003a4 <UpdateDisplay+0x8c>
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <UpdateDisplay+0xa0>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d00b      	beq.n	80003a4 <UpdateDisplay+0x8c>
        updateBlt = false;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <UpdateDisplay+0xa0>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
        I2C_Request(&BltRed);
 8000392:	480a      	ldr	r0, [pc, #40]	@ (80003bc <UpdateDisplay+0xa4>)
 8000394:	f000 ff7e 	bl	8001294 <I2C_Request>
        I2C_Request(&BltGreen);
 8000398:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <UpdateDisplay+0xa8>)
 800039a:	f000 ff7b 	bl	8001294 <I2C_Request>
        I2C_Request(&BltBlue);
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <UpdateDisplay+0x9c>)
 80003a0:	f000 ff78 	bl	8001294 <I2C_Request>
    }
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000040 	.word	0x20000040
 80003b0:	200001cc 	.word	0x200001cc
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	2000007a 	.word	0x2000007a
 80003bc:	2000007c 	.word	0x2000007c
 80003c0:	20000094 	.word	0x20000094

080003c4 <Init_Game>:


// --------------------------------------------------------
// Initialization
// --------------------------------------------------------
void Init_Game(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    GPIO_PortEnable(GPIOX);   // Enable the I/O expander (LEDs & buttons)
 80003c8:	4816      	ldr	r0, [pc, #88]	@ (8000424 <Init_Game+0x60>)
 80003ca:	f000 fce5 	bl	8000d98 <GPIO_PortEnable>
    timeShift = TimeNow();    // Record current time
 80003ce:	f001 f8a5 	bl	800151c <TimeNow>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <Init_Game+0x64>)
 80003d6:	6013      	str	r3, [r2, #0]
    position = 0;
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <Init_Game+0x68>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
    direction = 0;
 80003de:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <Init_Game+0x6c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
    reversed = 0;
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <Init_Game+0x70>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
    GPIO_PortOutput(GPIOX, 1 << position);  // Initialize LED at position 0
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <Init_Game+0x68>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2201      	movs	r2, #1
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	480a      	ldr	r0, [pc, #40]	@ (8000424 <Init_Game+0x60>)
 80003fa:	f000 fdc0 	bl	8000f7e <GPIO_PortOutput>

    // Set initial state
      state = TITLE;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <Init_Game+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]

      DisplayEnable();
 8000404:	f7ff ff14 	bl	8000230 <DisplayEnable>
	  DisplayColor(WHITE);
 8000408:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800040c:	f7ff ff60 	bl	80002d0 <DisplayColor>
	  DisplayPrint(0, "PONG");
 8000410:	490a      	ldr	r1, [pc, #40]	@ (800043c <Init_Game+0x78>)
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff ff20 	bl	8000258 <DisplayPrint>
	  DisplayPrint(1, "Speed: SLOW");
 8000418:	4909      	ldr	r1, [pc, #36]	@ (8000440 <Init_Game+0x7c>)
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ff1c 	bl	8000258 <DisplayPrint>

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000e0 	.word	0x200000e0
 8000428:	200001d0 	.word	0x200001d0
 800042c:	200000c8 	.word	0x200000c8
 8000430:	200001d4 	.word	0x200001d4
 8000434:	200001d8 	.word	0x200001d8
 8000438:	200001ce 	.word	0x200001ce
 800043c:	08001fa0 	.word	0x08001fa0
 8000440:	08001fa8 	.word	0x08001fa8

08000444 <Task_Game>:


// --------------------------------------------------------
// Periodic task
// --------------------------------------------------------
void Task_Game(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	@ 0x40
 8000448:	af00      	add	r7, sp, #0

	static Time_t startHoldTime = 0;
	static bool startHeld = false;

	// Global quit detection (hold Start for 3 seconds)
	bool currStartState = (GPIO_PortInput(GPIOX) & (1 << 11));  // Active-low
 800044a:	48a6      	ldr	r0, [pc, #664]	@ (80006e4 <Task_Game+0x2a0>)
 800044c:	f000 fd8a 	bl	8000f64 <GPIO_PortInput>
 8000450:	4603      	mov	r3, r0
 8000452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000456:	2b00      	cmp	r3, #0
 8000458:	bf14      	ite	ne
 800045a:	2301      	movne	r3, #1
 800045c:	2300      	moveq	r3, #0
 800045e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (currStartState && !startHeld) {
 8000462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000466:	2b00      	cmp	r3, #0
 8000468:	d013      	beq.n	8000492 <Task_Game+0x4e>
 800046a:	4b9f      	ldr	r3, [pc, #636]	@ (80006e8 <Task_Game+0x2a4>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	f083 0301 	eor.w	r3, r3, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00c      	beq.n	8000492 <Task_Game+0x4e>
	    // Start button just pressed
	    startHoldTime = TimeNow();
 8000478:	f001 f850 	bl	800151c <TimeNow>
 800047c:	4603      	mov	r3, r0
 800047e:	4a9b      	ldr	r2, [pc, #620]	@ (80006ec <Task_Game+0x2a8>)
 8000480:	6013      	str	r3, [r2, #0]
	    startHeld = true;
 8000482:	4b99      	ldr	r3, [pc, #612]	@ (80006e8 <Task_Game+0x2a4>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
	    GPIO_PortOutput(GPIOX, 0x00);  // Turn off all LEDs immediately
 8000488:	2100      	movs	r1, #0
 800048a:	4896      	ldr	r0, [pc, #600]	@ (80006e4 <Task_Game+0x2a0>)
 800048c:	f000 fd77 	bl	8000f7e <GPIO_PortOutput>
 8000490:	e009      	b.n	80004a6 <Task_Game+0x62>
	} else if (!currStartState) {
 8000492:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000496:	f083 0301 	eor.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <Task_Game+0x62>
	    // Start button released
	    startHeld = false;
 80004a0:	4b91      	ldr	r3, [pc, #580]	@ (80006e8 <Task_Game+0x2a4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	// Check if Start held for 3+ seconds (except in TITLE state)
	if (state != TITLE && startHeld && TimePassed(startHoldTime) >= QUIT_HOLD_TIME) {
 80004a6:	4b92      	ldr	r3, [pc, #584]	@ (80006f0 <Task_Game+0x2ac>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d04a      	beq.n	8000544 <Task_Game+0x100>
 80004ae:	4b8e      	ldr	r3, [pc, #568]	@ (80006e8 <Task_Game+0x2a4>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d046      	beq.n	8000544 <Task_Game+0x100>
 80004b6:	4b8d      	ldr	r3, [pc, #564]	@ (80006ec <Task_Game+0x2a8>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 f83a 	bl	8001534 <TimePassed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d93c      	bls.n	8000544 <Task_Game+0x100>
	    // LEDs already off from above

	    // Wait for Start button release
	    while (!(GPIO_PortInput(GPIOX) & (1 << 11))) {
 80004ca:	bf00      	nop
 80004cc:	4885      	ldr	r0, [pc, #532]	@ (80006e4 <Task_Game+0x2a0>)
 80004ce:	f000 fd49 	bl	8000f64 <GPIO_PortInput>
 80004d2:	4603      	mov	r3, r0
 80004d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f7      	beq.n	80004cc <Task_Game+0x88>
	        // Busy wait
	    }

	    // Reset game and return to title
	    P1score = 0;
 80004dc:	4b85      	ldr	r3, [pc, #532]	@ (80006f4 <Task_Game+0x2b0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
	    P2score = 0;
 80004e2:	4b85      	ldr	r3, [pc, #532]	@ (80006f8 <Task_Game+0x2b4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
	    firstServe = true;
 80004e8:	4b84      	ldr	r3, [pc, #528]	@ (80006fc <Task_Game+0x2b8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
	    speedIndex = 0;
 80004ee:	4b84      	ldr	r3, [pc, #528]	@ (8000700 <Task_Game+0x2bc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
	    position = 0;
 80004f4:	4b83      	ldr	r3, [pc, #524]	@ (8000704 <Task_Game+0x2c0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
	    direction = 0;
 80004fa:	4b83      	ldr	r3, [pc, #524]	@ (8000708 <Task_Game+0x2c4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]

	    DisplayColor(WHITE);
 8000500:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000504:	f7ff fee4 	bl	80002d0 <DisplayColor>
	    DisplayPrint(0, "PONG");
 8000508:	4980      	ldr	r1, [pc, #512]	@ (800070c <Task_Game+0x2c8>)
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fea4 	bl	8000258 <DisplayPrint>
	    DisplayPrint(1, "Speed: SLOW");
 8000510:	497f      	ldr	r1, [pc, #508]	@ (8000710 <Task_Game+0x2cc>)
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fea0 	bl	8000258 <DisplayPrint>
	    GPIO_PortOutput(GPIOX, 1 << position);
 8000518:	4b7a      	ldr	r3, [pc, #488]	@ (8000704 <Task_Game+0x2c0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	486f      	ldr	r0, [pc, #444]	@ (80006e4 <Task_Game+0x2a0>)
 8000528:	f000 fd29 	bl	8000f7e <GPIO_PortOutput>
	    timeShift = TimeNow();
 800052c:	f000 fff6 	bl	800151c <TimeNow>
 8000530:	4603      	mov	r3, r0
 8000532:	4a78      	ldr	r2, [pc, #480]	@ (8000714 <Task_Game+0x2d0>)
 8000534:	6013      	str	r3, [r2, #0]

	    state = TITLE;
 8000536:	4b6e      	ldr	r3, [pc, #440]	@ (80006f0 <Task_Game+0x2ac>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
	    startHeld = false;
 800053c:	4b6a      	ldr	r3, [pc, #424]	@ (80006e8 <Task_Game+0x2a4>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
	    return;
 8000542:	e3f9      	b.n	8000d38 <Task_Game+0x8f4>
	}

	// If Start is held but not in quit mode, keep LEDs off (except in TITLE)
	if (state != TITLE && startHeld) {
 8000544:	4b6a      	ldr	r3, [pc, #424]	@ (80006f0 <Task_Game+0x2ac>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d007      	beq.n	800055c <Task_Game+0x118>
 800054c:	4b66      	ldr	r3, [pc, #408]	@ (80006e8 <Task_Game+0x2a4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d003      	beq.n	800055c <Task_Game+0x118>
	    GPIO_PortOutput(GPIOX, 0x00);
 8000554:	2100      	movs	r1, #0
 8000556:	4863      	ldr	r0, [pc, #396]	@ (80006e4 <Task_Game+0x2a0>)
 8000558:	f000 fd11 	bl	8000f7e <GPIO_PortOutput>
	}

	switch (state) {
 800055c:	4b64      	ldr	r3, [pc, #400]	@ (80006f0 <Task_Game+0x2ac>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	f200 83e9 	bhi.w	8000d38 <Task_Game+0x8f4>
 8000566:	a201      	add	r2, pc, #4	@ (adr r2, 800056c <Task_Game+0x128>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	0800057d 	.word	0x0800057d
 8000570:	080006c5 	.word	0x080006c5
 8000574:	08000967 	.word	0x08000967
 8000578:	08000b97 	.word	0x08000b97
		case TITLE:
		 // Shift LED position every SHIFT_TIME ms
			if (TimePassed(timeShift) >=  speedTable[speedIndex]) {
 800057c:	4b65      	ldr	r3, [pc, #404]	@ (8000714 <Task_Game+0x2d0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 ffd7 	bl	8001534 <TimePassed>
 8000586:	4602      	mov	r2, r0
 8000588:	4b5d      	ldr	r3, [pc, #372]	@ (8000700 <Task_Game+0x2bc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4962      	ldr	r1, [pc, #392]	@ (8000718 <Task_Game+0x2d4>)
 800058e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000592:	429a      	cmp	r2, r3
 8000594:	d32a      	bcc.n	80005ec <Task_Game+0x1a8>

				if (position == 7)
 8000596:	4b5b      	ldr	r3, [pc, #364]	@ (8000704 <Task_Game+0x2c0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d103      	bne.n	80005a6 <Task_Game+0x162>
					direction = 0;
 800059e:	4b5a      	ldr	r3, [pc, #360]	@ (8000708 <Task_Game+0x2c4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e006      	b.n	80005b4 <Task_Game+0x170>

				else if (position == 0)
 80005a6:	4b57      	ldr	r3, [pc, #348]	@ (8000704 <Task_Game+0x2c0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d102      	bne.n	80005b4 <Task_Game+0x170>
					direction = 1;
 80005ae:	4b56      	ldr	r3, [pc, #344]	@ (8000708 <Task_Game+0x2c4>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]


				position += direction ? +1 : -1;
 80005b4:	4b54      	ldr	r3, [pc, #336]	@ (8000708 <Task_Game+0x2c4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <Task_Game+0x17c>
 80005bc:	2201      	movs	r2, #1
 80005be:	e001      	b.n	80005c4 <Task_Game+0x180>
 80005c0:	f04f 32ff 	mov.w	r2, #4294967295
 80005c4:	4b4f      	ldr	r3, [pc, #316]	@ (8000704 <Task_Game+0x2c0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a4e      	ldr	r2, [pc, #312]	@ (8000704 <Task_Game+0x2c0>)
 80005cc:	6013      	str	r3, [r2, #0]

				GPIO_PortOutput(GPIOX, (uint16_t)(1 << position));  // Update LEDs
 80005ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000704 <Task_Game+0x2c0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2201      	movs	r2, #1
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	4841      	ldr	r0, [pc, #260]	@ (80006e4 <Task_Game+0x2a0>)
 80005de:	f000 fcce 	bl	8000f7e <GPIO_PortOutput>
				timeShift = TimeNow();                              // Reset shift timer
 80005e2:	f000 ff9b 	bl	800151c <TimeNow>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000714 <Task_Game+0x2d0>)
 80005ea:	6013      	str	r3, [r2, #0]
			}



			bool currSelectState = (GPIO_PortInput(GPIOX) & (1 << 12));  // Active-low button
 80005ec:	483d      	ldr	r0, [pc, #244]	@ (80006e4 <Task_Game+0x2a0>)
 80005ee:	f000 fcb9 	bl	8000f64 <GPIO_PortInput>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			static bool prevSelectState = false;
			if (currSelectState && !prevSelectState) {
 8000604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000608:	2b00      	cmp	r3, #0
 800060a:	d009      	beq.n	8000620 <Task_Game+0x1dc>
 800060c:	4b43      	ldr	r3, [pc, #268]	@ (800071c <Task_Game+0x2d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <Task_Game+0x1dc>
			    // Rising edge (press)
			    selectPressed = true;
 800061a:	4b41      	ldr	r3, [pc, #260]	@ (8000720 <Task_Game+0x2dc>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
			}
			prevSelectState = currSelectState;
 8000620:	4a3e      	ldr	r2, [pc, #248]	@ (800071c <Task_Game+0x2d8>)
 8000622:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000626:	7013      	strb	r3, [r2, #0]
			// Handle select button press (speed change)
			if (selectPressed) {
 8000628:	4b3d      	ldr	r3, [pc, #244]	@ (8000720 <Task_Game+0x2dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d02a      	beq.n	8000686 <Task_Game+0x242>
				selectPressed = false;
 8000630:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <Task_Game+0x2dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]


				// Cycle speed index 0 → 1 → 2 → 0
				speedIndex = (speedIndex + 1) % NUM_SPEEDS;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <Task_Game+0x2bc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1c59      	adds	r1, r3, #1
 800063c:	4b39      	ldr	r3, [pc, #228]	@ (8000724 <Task_Game+0x2e0>)
 800063e:	fb83 3201 	smull	r3, r2, r3, r1
 8000642:	17cb      	asrs	r3, r1, #31
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	1aca      	subs	r2, r1, r3
 800064e:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <Task_Game+0x2bc>)
 8000650:	601a      	str	r2, [r3, #0]

				// Update display text for feedback
				switch (speedIndex) {
 8000652:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <Task_Game+0x2bc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d010      	beq.n	800067c <Task_Game+0x238>
 800065a:	2b02      	cmp	r3, #2
 800065c:	dc13      	bgt.n	8000686 <Task_Game+0x242>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <Task_Game+0x224>
 8000662:	2b01      	cmp	r3, #1
 8000664:	d005      	beq.n	8000672 <Task_Game+0x22e>
 8000666:	e00e      	b.n	8000686 <Task_Game+0x242>
					case 0: DisplayPrint(1, "Speed: SLOW   "); break;
 8000668:	492f      	ldr	r1, [pc, #188]	@ (8000728 <Task_Game+0x2e4>)
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff fdf4 	bl	8000258 <DisplayPrint>
 8000670:	e009      	b.n	8000686 <Task_Game+0x242>
					case 1: DisplayPrint(1, "Speed: MEDIUM "); break;
 8000672:	492e      	ldr	r1, [pc, #184]	@ (800072c <Task_Game+0x2e8>)
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fdef 	bl	8000258 <DisplayPrint>
 800067a:	e004      	b.n	8000686 <Task_Game+0x242>
					case 2: DisplayPrint(1, "Speed: FAST   "); break;
 800067c:	492c      	ldr	r1, [pc, #176]	@ (8000730 <Task_Game+0x2ec>)
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fdea 	bl	8000258 <DisplayPrint>
 8000684:	bf00      	nop
				}
			}



			bool currStartStateTitle = (GPIO_PortInput(GPIOX) & (1 << 11));  // Active-low button
 8000686:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <Task_Game+0x2a0>)
 8000688:	f000 fc6c 	bl	8000f64 <GPIO_PortInput>
 800068c:	4603      	mov	r3, r0
 800068e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			static bool prevStartStateTitle = false;

			// Only transition on RISING EDGE (button press), not while held
			if (currStartStateTitle && !prevStartStateTitle) {
 800069e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <Task_Game+0x276>
 80006a6:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <Task_Game+0x2f0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f083 0301 	eor.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <Task_Game+0x276>
			    state = SERVE;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <Task_Game+0x2ac>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
			}
			prevStartStateTitle = currStartStateTitle;
 80006ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <Task_Game+0x2f0>)
 80006bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80006c0:	7013      	strb	r3, [r2, #0]

		break;
 80006c2:	e339      	b.n	8000d38 <Task_Game+0x8f4>

		case SERVE:
			static bool serveReady = false;
			static Time_t serveStart = 0;

			Time_t seed = TimeNow();
 80006c4:	f000 ff2a 	bl	800151c <TimeNow>
 80006c8:	6378      	str	r0, [r7, #52]	@ 0x34

			if (firstServe){
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <Task_Game+0x2b8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d043      	beq.n	800075a <Task_Game+0x316>
				if (seed % 2 == 1) {
 80006d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d02f      	beq.n	800073c <Task_Game+0x2f8>
					P1serve = true;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <Task_Game+0x2f4>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e02e      	b.n	8000742 <Task_Game+0x2fe>
 80006e4:	200000e0 	.word	0x200000e0
 80006e8:	200001e9 	.word	0x200001e9
 80006ec:	200001ec 	.word	0x200001ec
 80006f0:	200001ce 	.word	0x200001ce
 80006f4:	200001e0 	.word	0x200001e0
 80006f8:	200001e4 	.word	0x200001e4
 80006fc:	200000cc 	.word	0x200000cc
 8000700:	200001dc 	.word	0x200001dc
 8000704:	200000c8 	.word	0x200000c8
 8000708:	200001d4 	.word	0x200001d4
 800070c:	08001fa0 	.word	0x08001fa0
 8000710:	08001fa8 	.word	0x08001fa8
 8000714:	200001d0 	.word	0x200001d0
 8000718:	200000d0 	.word	0x200000d0
 800071c:	200001f0 	.word	0x200001f0
 8000720:	200001e8 	.word	0x200001e8
 8000724:	55555556 	.word	0x55555556
 8000728:	08001fb4 	.word	0x08001fb4
 800072c:	08001fc4 	.word	0x08001fc4
 8000730:	08001fd4 	.word	0x08001fd4
 8000734:	200001f1 	.word	0x200001f1
 8000738:	200000c4 	.word	0x200000c4

				} else {
					P1serve = false;
 800073c:	4b96      	ldr	r3, [pc, #600]	@ (8000998 <Task_Game+0x554>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
				}

				firstServe = false;
 8000742:	4b96      	ldr	r3, [pc, #600]	@ (800099c <Task_Game+0x558>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
				serveStart = TimeNow();
 8000748:	f000 fee8 	bl	800151c <TimeNow>
 800074c:	4603      	mov	r3, r0
 800074e:	4a94      	ldr	r2, [pc, #592]	@ (80009a0 <Task_Game+0x55c>)
 8000750:	6013      	str	r3, [r2, #0]
				serveReady = true;
 8000752:	4b94      	ldr	r3, [pc, #592]	@ (80009a4 <Task_Game+0x560>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e040      	b.n	80007dc <Task_Game+0x398>


			}else if (!serveReady) {
 800075a:	4b92      	ldr	r3, [pc, #584]	@ (80009a4 <Task_Game+0x560>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d039      	beq.n	80007dc <Task_Game+0x398>

			 int totalPoints = P1score + P2score;
 8000768:	4b8f      	ldr	r3, [pc, #572]	@ (80009a8 <Task_Game+0x564>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b8f      	ldr	r3, [pc, #572]	@ (80009ac <Task_Game+0x568>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4413      	add	r3, r2
 8000772:	633b      	str	r3, [r7, #48]	@ 0x30

				// Before 10 → alternate every 2 points
				// After 10  → alternate every 1 point
				if ((P1score < 10 && P2score < 10)) {
 8000774:	4b8c      	ldr	r3, [pc, #560]	@ (80009a8 <Task_Game+0x564>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b09      	cmp	r3, #9
 800077a:	dc18      	bgt.n	80007ae <Task_Game+0x36a>
 800077c:	4b8b      	ldr	r3, [pc, #556]	@ (80009ac <Task_Game+0x568>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b09      	cmp	r3, #9
 8000782:	dc14      	bgt.n	80007ae <Task_Game+0x36a>
					if (totalPoints % 2 == 0) {
 8000784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11e      	bne.n	80007cc <Task_Game+0x388>
						P1serve = !P1serve;
 800078e:	4b82      	ldr	r3, [pc, #520]	@ (8000998 <Task_Game+0x554>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b7b      	ldr	r3, [pc, #492]	@ (8000998 <Task_Game+0x554>)
 80007aa:	701a      	strb	r2, [r3, #0]
					if (totalPoints % 2 == 0) {
 80007ac:	e00e      	b.n	80007cc <Task_Game+0x388>
					}
				} else {
					// After 10 points reached by anyone, alternate every serve
					P1serve = !P1serve;
 80007ae:	4b7a      	ldr	r3, [pc, #488]	@ (8000998 <Task_Game+0x554>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b73      	ldr	r3, [pc, #460]	@ (8000998 <Task_Game+0x554>)
 80007ca:	701a      	strb	r2, [r3, #0]
				}

	            serveStart = TimeNow();
 80007cc:	f000 fea6 	bl	800151c <TimeNow>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a73      	ldr	r2, [pc, #460]	@ (80009a0 <Task_Game+0x55c>)
 80007d4:	6013      	str	r3, [r2, #0]
				serveReady = true;
 80007d6:	4b73      	ldr	r3, [pc, #460]	@ (80009a4 <Task_Game+0x560>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
	        }

			inputs = GPIO_PortInput(GPIOX);
 80007dc:	4874      	ldr	r0, [pc, #464]	@ (80009b0 <Task_Game+0x56c>)
 80007de:	f000 fbc1 	bl	8000f64 <GPIO_PortInput>
 80007e2:	4603      	mov	r3, r0
 80007e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c


			bool selectHeld = (inputs & (1 << 12));
 80007e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80007e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


			// --- Detect serve button (active-low) ---
			bool P2press = !(inputs & ((1 << 8) | (1 << 9) | (1 << 10)));
 80007f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80007fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			bool P1press = !(inputs & ((1 << 13) | (1 << 14) | (1 << 15)));
 800080a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800080c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

			if (serveReady) {
 800081c:	4b61      	ldr	r3, [pc, #388]	@ (80009a4 <Task_Game+0x560>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	f000 8286 	beq.w	8000d32 <Task_Game+0x8ee>


				 if (P1serve) {
 8000826:	4b5c      	ldr	r3, [pc, #368]	@ (8000998 <Task_Game+0x554>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d019      	beq.n	8000862 <Task_Game+0x41e>
					DisplayColor(CYAN);
 800082e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000832:	f7ff fd4d 	bl	80002d0 <DisplayColor>
					DisplayPrint(0, "1P SERVES");
 8000836:	495f      	ldr	r1, [pc, #380]	@ (80009b4 <Task_Game+0x570>)
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fd0d 	bl	8000258 <DisplayPrint>
					DisplayPrint(1, "");
 800083e:	495e      	ldr	r1, [pc, #376]	@ (80009b8 <Task_Game+0x574>)
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fd09 	bl	8000258 <DisplayPrint>
					position = 6;
 8000846:	4b5d      	ldr	r3, [pc, #372]	@ (80009bc <Task_Game+0x578>)
 8000848:	2206      	movs	r2, #6
 800084a:	601a      	str	r2, [r3, #0]
					GPIO_PortOutput(GPIOX, (uint16_t)(1 << position));
 800084c:	4b5b      	ldr	r3, [pc, #364]	@ (80009bc <Task_Game+0x578>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2201      	movs	r2, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4855      	ldr	r0, [pc, #340]	@ (80009b0 <Task_Game+0x56c>)
 800085c:	f000 fb8f 	bl	8000f7e <GPIO_PortOutput>
 8000860:	e017      	b.n	8000892 <Task_Game+0x44e>
				} else {
					DisplayColor(YELLOW);
 8000862:	4857      	ldr	r0, [pc, #348]	@ (80009c0 <Task_Game+0x57c>)
 8000864:	f7ff fd34 	bl	80002d0 <DisplayColor>
					DisplayPrint(0, "2P SERVES");
 8000868:	4956      	ldr	r1, [pc, #344]	@ (80009c4 <Task_Game+0x580>)
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fcf4 	bl	8000258 <DisplayPrint>
					DisplayPrint(1, "");
 8000870:	4951      	ldr	r1, [pc, #324]	@ (80009b8 <Task_Game+0x574>)
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fcf0 	bl	8000258 <DisplayPrint>
					position = 1;
 8000878:	4b50      	ldr	r3, [pc, #320]	@ (80009bc <Task_Game+0x578>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
					GPIO_PortOutput(GPIOX, (uint16_t)(1 << position));
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <Task_Game+0x578>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	b29b      	uxth	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	4848      	ldr	r0, [pc, #288]	@ (80009b0 <Task_Game+0x56c>)
 800088e:	f000 fb76 	bl	8000f7e <GPIO_PortOutput>
				}

				 if (selectHeld) {
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000896:	2b00      	cmp	r3, #0
 8000898:	d026      	beq.n	80008e8 <Task_Game+0x4a4>
					 DisplayColor(RED);
 800089a:	f44f 007f 	mov.w	r0, #16711680	@ 0xff0000
 800089e:	f7ff fd17 	bl	80002d0 <DisplayColor>
					 char scoreText[17];
					 sprintf(scoreText, "SCORE  %d - %d", P1score, P2score);
 80008a2:	4b41      	ldr	r3, [pc, #260]	@ (80009a8 <Task_Game+0x564>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b41      	ldr	r3, [pc, #260]	@ (80009ac <Task_Game+0x568>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1d38      	adds	r0, r7, #4
 80008ac:	4946      	ldr	r1, [pc, #280]	@ (80009c8 <Task_Game+0x584>)
 80008ae:	f000 fe85 	bl	80015bc <siprintf>
					 DisplayPrint(1, scoreText);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fcce 	bl	8000258 <DisplayPrint>

					 // Show score in binary on LEDs
					 uint8_t scoreBinary = ((P1score & 0x0F) << 4) | (P2score & 0x0F);
 80008bc:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <Task_Game+0x564>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	4b39      	ldr	r3, [pc, #228]	@ (80009ac <Task_Game+0x568>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	f003 030f 	and.w	r3, r3, #15
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
					 GPIO_PortOutput(GPIOX, scoreBinary);
 80008da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	4833      	ldr	r0, [pc, #204]	@ (80009b0 <Task_Game+0x56c>)
 80008e4:	f000 fb4b 	bl	8000f7e <GPIO_PortOutput>
				}

				if ((P1serve && !P1press) || (!P1serve && !P2press)) {
 80008e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <Task_Game+0x554>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <Task_Game+0x4ba>
 80008f0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008f4:	f083 0301 	eor.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <Task_Game+0x4da>
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <Task_Game+0x554>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 8212 	beq.w	8000d32 <Task_Game+0x8ee>
 800090e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	f000 820a 	beq.w	8000d32 <Task_Game+0x8ee>
					// Start the volley

					direction = P1serve ? 0 : 1;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <Task_Game+0x554>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	f083 0301 	eor.w	r3, r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <Task_Game+0x588>)
 800092c:	601a      	str	r2, [r3, #0]
					DisplayColor(WHITE);
 800092e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000932:	f7ff fccd 	bl	80002d0 <DisplayColor>
					DisplayPrint(0, "PLAY!");
 8000936:	4926      	ldr	r1, [pc, #152]	@ (80009d0 <Task_Game+0x58c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fc8d 	bl	8000258 <DisplayPrint>
					DisplayPrint(1, "");
 800093e:	491e      	ldr	r1, [pc, #120]	@ (80009b8 <Task_Game+0x574>)
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fc89 	bl	8000258 <DisplayPrint>

					serveReady = false;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <Task_Game+0x560>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]

					timeShift = TimeNow();
 800094c:	f000 fde6 	bl	800151c <TimeNow>
 8000950:	4603      	mov	r3, r0
 8000952:	4a20      	ldr	r2, [pc, #128]	@ (80009d4 <Task_Game+0x590>)
 8000954:	6013      	str	r3, [r2, #0]
					state = PLAY;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <Task_Game+0x594>)
 8000958:	2202      	movs	r2, #2
 800095a:	701a      	strb	r2, [r3, #0]
					msDelay(400);
 800095c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000960:	f000 fdc6 	bl	80014f0 <msDelay>

				}

			}
		break;
 8000964:	e1e5      	b.n	8000d32 <Task_Game+0x8ee>

		case PLAY:
			inputs = GPIO_PortInput(GPIOX);
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <Task_Game+0x56c>)
 8000968:	f000 fafc 	bl	8000f64 <GPIO_PortInput>
 800096c:	4603      	mov	r3, r0
 800096e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

			if (TimePassed(timeShift) >= speedTable[speedIndex]) {
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <Task_Game+0x590>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fddd 	bl	8001534 <TimePassed>
 800097a:	4602      	mov	r2, r0
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <Task_Game+0x598>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4917      	ldr	r1, [pc, #92]	@ (80009e0 <Task_Game+0x59c>)
 8000982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000986:	429a      	cmp	r2, r3
 8000988:	d342      	bcc.n	8000a10 <Task_Game+0x5cc>
			        // Move ball one step in current direction
				position += direction ? +1 : -1;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <Task_Game+0x588>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d028      	beq.n	80009e4 <Task_Game+0x5a0>
 8000992:	2201      	movs	r2, #1
 8000994:	e028      	b.n	80009e8 <Task_Game+0x5a4>
 8000996:	bf00      	nop
 8000998:	200000c4 	.word	0x200000c4
 800099c:	200000cc 	.word	0x200000cc
 80009a0:	200001f4 	.word	0x200001f4
 80009a4:	200001f8 	.word	0x200001f8
 80009a8:	200001e0 	.word	0x200001e0
 80009ac:	200001e4 	.word	0x200001e4
 80009b0:	200000e0 	.word	0x200000e0
 80009b4:	08001fe4 	.word	0x08001fe4
 80009b8:	08001ff0 	.word	0x08001ff0
 80009bc:	200000c8 	.word	0x200000c8
 80009c0:	00ffff00 	.word	0x00ffff00
 80009c4:	08001ff4 	.word	0x08001ff4
 80009c8:	08002000 	.word	0x08002000
 80009cc:	200001d4 	.word	0x200001d4
 80009d0:	08002010 	.word	0x08002010
 80009d4:	200001d0 	.word	0x200001d0
 80009d8:	200001ce 	.word	0x200001ce
 80009dc:	200001dc 	.word	0x200001dc
 80009e0:	200000d0 	.word	0x200000d0
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	4b8c      	ldr	r3, [pc, #560]	@ (8000c1c <Task_Game+0x7d8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a8b      	ldr	r2, [pc, #556]	@ (8000c1c <Task_Game+0x7d8>)
 80009f0:	6013      	str	r3, [r2, #0]
				GPIO_PortOutput(GPIOX, (uint16_t)(1 << position));
 80009f2:	4b8a      	ldr	r3, [pc, #552]	@ (8000c1c <Task_Game+0x7d8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2201      	movs	r2, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	4887      	ldr	r0, [pc, #540]	@ (8000c20 <Task_Game+0x7dc>)
 8000a02:	f000 fabc 	bl	8000f7e <GPIO_PortOutput>
				timeShift = TimeNow();
 8000a06:	f000 fd89 	bl	800151c <TimeNow>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a85      	ldr	r2, [pc, #532]	@ (8000c24 <Task_Game+0x7e0>)
 8000a0e:	6013      	str	r3, [r2, #0]
			static bool prevP1State = true;
			static bool prevP2State = true;


			 // read active-low inputs
			 bool currP2State = (inputs & ((1 << 8) | (1 << 9) | (1 << 10)));
 8000a10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			 bool currP1State = (inputs & ((1 << 13) | (1 << 14) | (1 << 15)));
 8000a22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a


			 // detect *edge* — button was just pressed
			 bool P1return = (currP1State && prevP1State); // went high→low
 8000a34:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d005      	beq.n	8000a48 <Task_Game+0x604>
 8000a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8000c28 <Task_Game+0x7e4>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <Task_Game+0x604>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <Task_Game+0x606>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000a4e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			 bool P2return = (currP2State && prevP2State);
 8000a5a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <Task_Game+0x62a>
 8000a62:	4b72      	ldr	r3, [pc, #456]	@ (8000c2c <Task_Game+0x7e8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <Task_Game+0x62a>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <Task_Game+0x62c>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000a74:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

			 prevP1State = currP1State;
 8000a80:	4a69      	ldr	r2, [pc, #420]	@ (8000c28 <Task_Game+0x7e4>)
 8000a82:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a86:	7013      	strb	r3, [r2, #0]
			 prevP2State = currP2State;
 8000a88:	4a68      	ldr	r2, [pc, #416]	@ (8000c2c <Task_Game+0x7e8>)
 8000a8a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a8e:	7013      	strb	r3, [r2, #0]


			 if (position == 0){
 8000a90:	4b62      	ldr	r3, [pc, #392]	@ (8000c1c <Task_Game+0x7d8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <Task_Game+0x668>
				 if (P2return) {
 8000a98:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d005      	beq.n	8000aac <Task_Game+0x668>
					direction = 1;  // send ball right
 8000aa0:	4b63      	ldr	r3, [pc, #396]	@ (8000c30 <Task_Game+0x7ec>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
					DisplayColor(YELLOW);
 8000aa6:	4863      	ldr	r0, [pc, #396]	@ (8000c34 <Task_Game+0x7f0>)
 8000aa8:	f7ff fc12 	bl	80002d0 <DisplayColor>
				}
			 }

			 if (position == 7){
 8000aac:	4b5b      	ldr	r3, [pc, #364]	@ (8000c1c <Task_Game+0x7d8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	d10a      	bne.n	8000aca <Task_Game+0x686>
				 if (P1return) {
 8000ab4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <Task_Game+0x686>
					direction = 0;  // send ball left
 8000abc:	4b5c      	ldr	r3, [pc, #368]	@ (8000c30 <Task_Game+0x7ec>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
					DisplayColor(CYAN);
 8000ac2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ac6:	f7ff fc03 	bl	80002d0 <DisplayColor>
				}
			 }


			if (position == -1) {  // left edge → P1’s turn
 8000aca:	4b54      	ldr	r3, [pc, #336]	@ (8000c1c <Task_Game+0x7d8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad2:	d12d      	bne.n	8000b30 <Task_Game+0x6ec>

				if (P2return) {
 8000ad4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <Task_Game+0x6a6>
					direction = 1;  // send ball right
 8000adc:	4b54      	ldr	r3, [pc, #336]	@ (8000c30 <Task_Game+0x7ec>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
					DisplayColor(YELLOW);
 8000ae2:	4854      	ldr	r0, [pc, #336]	@ (8000c34 <Task_Game+0x7f0>)
 8000ae4:	f7ff fbf4 	bl	80002d0 <DisplayColor>

					msDelay(100);
				}
			}

		break;
 8000ae8:	e125      	b.n	8000d36 <Task_Game+0x8f2>
					P1score++;
 8000aea:	4b53      	ldr	r3, [pc, #332]	@ (8000c38 <Task_Game+0x7f4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a51      	ldr	r2, [pc, #324]	@ (8000c38 <Task_Game+0x7f4>)
 8000af2:	6013      	str	r3, [r2, #0]
					DisplayColor(CYAN);
 8000af4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000af8:	f7ff fbea 	bl	80002d0 <DisplayColor>
					DisplayPrint(0, "1P SCORES!");
 8000afc:	494f      	ldr	r1, [pc, #316]	@ (8000c3c <Task_Game+0x7f8>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff fbaa 	bl	8000258 <DisplayPrint>
					if (P1score >= 11 && (P1score - P2score) >= 2) {
 8000b04:	4b4c      	ldr	r3, [pc, #304]	@ (8000c38 <Task_Game+0x7f4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b0a      	cmp	r3, #10
 8000b0a:	dd0a      	ble.n	8000b22 <Task_Game+0x6de>
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c38 <Task_Game+0x7f4>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b4b      	ldr	r3, [pc, #300]	@ (8000c40 <Task_Game+0x7fc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	dd03      	ble.n	8000b22 <Task_Game+0x6de>
						state = WIN;
 8000b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c44 <Task_Game+0x800>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e002      	b.n	8000b28 <Task_Game+0x6e4>
						state = SERVE;
 8000b22:	4b48      	ldr	r3, [pc, #288]	@ (8000c44 <Task_Game+0x800>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
					msDelay(100);
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	f000 fce1 	bl	80014f0 <msDelay>
		break;
 8000b2e:	e102      	b.n	8000d36 <Task_Game+0x8f2>
			else if (position == 8) {  // right edge → P2’s turn
 8000b30:	4b3a      	ldr	r3, [pc, #232]	@ (8000c1c <Task_Game+0x7d8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	f040 80fe 	bne.w	8000d36 <Task_Game+0x8f2>
				if (P1return) {
 8000b3a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <Task_Game+0x70e>
					direction = 0;  // send ball left
 8000b42:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <Task_Game+0x7ec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
					DisplayColor(CYAN);
 8000b48:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b4c:	f7ff fbc0 	bl	80002d0 <DisplayColor>
		break;
 8000b50:	e0f1      	b.n	8000d36 <Task_Game+0x8f2>
					P2score++;
 8000b52:	4b3b      	ldr	r3, [pc, #236]	@ (8000c40 <Task_Game+0x7fc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a39      	ldr	r2, [pc, #228]	@ (8000c40 <Task_Game+0x7fc>)
 8000b5a:	6013      	str	r3, [r2, #0]
					DisplayColor(YELLOW);
 8000b5c:	4835      	ldr	r0, [pc, #212]	@ (8000c34 <Task_Game+0x7f0>)
 8000b5e:	f7ff fbb7 	bl	80002d0 <DisplayColor>
					DisplayPrint(0, "2P SCORES!");
 8000b62:	4939      	ldr	r1, [pc, #228]	@ (8000c48 <Task_Game+0x804>)
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fb77 	bl	8000258 <DisplayPrint>
					if (P2score >= 11 && (P2score - P1score) >= 2) {
 8000b6a:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <Task_Game+0x7fc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b0a      	cmp	r3, #10
 8000b70:	dd0a      	ble.n	8000b88 <Task_Game+0x744>
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <Task_Game+0x7fc>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <Task_Game+0x7f4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	dd03      	ble.n	8000b88 <Task_Game+0x744>
						state = WIN;
 8000b80:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <Task_Game+0x800>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e002      	b.n	8000b8e <Task_Game+0x74a>
						state = SERVE;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <Task_Game+0x800>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
					msDelay(100);
 8000b8e:	2064      	movs	r0, #100	@ 0x64
 8000b90:	f000 fcae 	bl	80014f0 <msDelay>
		break;
 8000b94:	e0cf      	b.n	8000d36 <Task_Game+0x8f2>

		case WIN:
			// Display winner
			if (P1score > P2score) {
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <Task_Game+0x7f4>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <Task_Game+0x7fc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dd08      	ble.n	8000bb4 <Task_Game+0x770>
				DisplayColor(CYAN);
 8000ba2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ba6:	f7ff fb93 	bl	80002d0 <DisplayColor>
				DisplayPrint(0, "PLAYER 1 WINS!");
 8000baa:	4928      	ldr	r1, [pc, #160]	@ (8000c4c <Task_Game+0x808>)
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fb53 	bl	8000258 <DisplayPrint>
 8000bb2:	e006      	b.n	8000bc2 <Task_Game+0x77e>
			} else {
				DisplayColor(YELLOW);
 8000bb4:	481f      	ldr	r0, [pc, #124]	@ (8000c34 <Task_Game+0x7f0>)
 8000bb6:	f7ff fb8b 	bl	80002d0 <DisplayColor>
				DisplayPrint(0, "PLAYER 2 WINS!");
 8000bba:	4925      	ldr	r1, [pc, #148]	@ (8000c50 <Task_Game+0x80c>)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fb4b 	bl	8000258 <DisplayPrint>
			}

			char finalScore[17];
			sprintf(finalScore, "Score: %d - %d", P1score, P2score);
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <Task_Game+0x7f4>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <Task_Game+0x7fc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f107 0018 	add.w	r0, r7, #24
 8000bce:	4921      	ldr	r1, [pc, #132]	@ (8000c54 <Task_Game+0x810>)
 8000bd0:	f000 fcf4 	bl	80015bc <siprintf>
			DisplayPrint(1, finalScore);
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fb3c 	bl	8000258 <DisplayPrint>

			// Flash all LEDs
			static Time_t flashTime = 0;
			static bool ledsOn = false;

			if (TimePassed(flashTime) >= 500) {
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <Task_Game+0x814>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fca5 	bl	8001534 <TimePassed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bf0:	d340      	bcc.n	8000c74 <Task_Game+0x830>
				ledsOn = !ledsOn;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <Task_Game+0x818>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <Task_Game+0x818>)
 8000c0e:	701a      	strb	r2, [r3, #0]
				GPIO_PortOutput(GPIOX, ledsOn ? 0xFF : 0x00);
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <Task_Game+0x818>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d023      	beq.n	8000c60 <Task_Game+0x81c>
 8000c18:	23ff      	movs	r3, #255	@ 0xff
 8000c1a:	e022      	b.n	8000c62 <Task_Game+0x81e>
 8000c1c:	200000c8 	.word	0x200000c8
 8000c20:	200000e0 	.word	0x200000e0
 8000c24:	200001d0 	.word	0x200001d0
 8000c28:	200000dc 	.word	0x200000dc
 8000c2c:	200000dd 	.word	0x200000dd
 8000c30:	200001d4 	.word	0x200001d4
 8000c34:	00ffff00 	.word	0x00ffff00
 8000c38:	200001e0 	.word	0x200001e0
 8000c3c:	08002018 	.word	0x08002018
 8000c40:	200001e4 	.word	0x200001e4
 8000c44:	200001ce 	.word	0x200001ce
 8000c48:	08002024 	.word	0x08002024
 8000c4c:	08002030 	.word	0x08002030
 8000c50:	08002040 	.word	0x08002040
 8000c54:	08002050 	.word	0x08002050
 8000c58:	200001fc 	.word	0x200001fc
 8000c5c:	20000200 	.word	0x20000200
 8000c60:	2300      	movs	r3, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4836      	ldr	r0, [pc, #216]	@ (8000d40 <Task_Game+0x8fc>)
 8000c66:	f000 f98a 	bl	8000f7e <GPIO_PortOutput>
				flashTime = TimeNow();
 8000c6a:	f000 fc57 	bl	800151c <TimeNow>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a34      	ldr	r2, [pc, #208]	@ (8000d44 <Task_Game+0x900>)
 8000c72:	6013      	str	r3, [r2, #0]
			}

			// Wait for Start button press to return to title
			currStartState = (GPIO_PortInput(GPIOX) & (1 << 11));
 8000c74:	4832      	ldr	r0, [pc, #200]	@ (8000d40 <Task_Game+0x8fc>)
 8000c76:	f000 f975 	bl	8000f64 <GPIO_PortInput>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			static bool prevStartStateWin = false;
			if (currStartState && !prevStartStateWin) {
 8000c8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d049      	beq.n	8000d28 <Task_Game+0x8e4>
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <Task_Game+0x904>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	f083 0301 	eor.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d042      	beq.n	8000d28 <Task_Game+0x8e4>
				// Reset game
				P1score = 0;
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <Task_Game+0x908>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
				P2score = 0;
 8000ca8:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <Task_Game+0x90c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
				firstServe = true;
 8000cae:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <Task_Game+0x910>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
				position = 0;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <Task_Game+0x914>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
				direction = 0;
 8000cba:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <Task_Game+0x918>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]

				DisplayColor(WHITE);
 8000cc0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000cc4:	f7ff fb04 	bl	80002d0 <DisplayColor>
				DisplayPrint(0, "PONG");
 8000cc8:	4925      	ldr	r1, [pc, #148]	@ (8000d60 <Task_Game+0x91c>)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fac4 	bl	8000258 <DisplayPrint>
				switch (speedIndex) {
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <Task_Game+0x920>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d010      	beq.n	8000cfa <Task_Game+0x8b6>
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	dc13      	bgt.n	8000d04 <Task_Game+0x8c0>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <Task_Game+0x8a2>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <Task_Game+0x8ac>
 8000ce4:	e00e      	b.n	8000d04 <Task_Game+0x8c0>
				case 0: DisplayPrint(1, "Speed: SLOW   "); break;
 8000ce6:	4920      	ldr	r1, [pc, #128]	@ (8000d68 <Task_Game+0x924>)
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fab5 	bl	8000258 <DisplayPrint>
 8000cee:	e009      	b.n	8000d04 <Task_Game+0x8c0>
				case 1: DisplayPrint(1, "Speed: MEDIUM "); break;
 8000cf0:	491e      	ldr	r1, [pc, #120]	@ (8000d6c <Task_Game+0x928>)
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fab0 	bl	8000258 <DisplayPrint>
 8000cf8:	e004      	b.n	8000d04 <Task_Game+0x8c0>
				case 2: DisplayPrint(1, "Speed: FAST   "); break;
 8000cfa:	491d      	ldr	r1, [pc, #116]	@ (8000d70 <Task_Game+0x92c>)
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff faab 	bl	8000258 <DisplayPrint>
 8000d02:	bf00      	nop
				}
				GPIO_PortOutput(GPIOX, 1 << position);
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <Task_Game+0x914>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <Task_Game+0x8fc>)
 8000d14:	f000 f933 	bl	8000f7e <GPIO_PortOutput>
				timeShift = TimeNow();
 8000d18:	f000 fc00 	bl	800151c <TimeNow>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <Task_Game+0x930>)
 8000d20:	6013      	str	r3, [r2, #0]

				state = TITLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <Task_Game+0x934>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
			}
			prevStartStateWin = currStartState;
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <Task_Game+0x904>)
 8000d2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d2e:	7013      	strb	r3, [r2, #0]
		break;
 8000d30:	e002      	b.n	8000d38 <Task_Game+0x8f4>
		break;
 8000d32:	bf00      	nop
 8000d34:	e000      	b.n	8000d38 <Task_Game+0x8f4>
		break;
 8000d36:	bf00      	nop
	}


}
 8000d38:	3740      	adds	r7, #64	@ 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000e0 	.word	0x200000e0
 8000d44:	200001fc 	.word	0x200001fc
 8000d48:	20000201 	.word	0x20000201
 8000d4c:	200001e0 	.word	0x200001e0
 8000d50:	200001e4 	.word	0x200001e4
 8000d54:	200000cc 	.word	0x200000cc
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	200001d4 	.word	0x200001d4
 8000d60:	08001fa0 	.word	0x08001fa0
 8000d64:	200001dc 	.word	0x200001dc
 8000d68:	08001fb4 	.word	0x08001fb4
 8000d6c:	08001fc4 	.word	0x08001fc4
 8000d70:	08001fd4 	.word	0x08001fd4
 8000d74:	200001d0 	.word	0x200001d0
 8000d78:	200001ce 	.word	0x200001ce

08000d7c <GPIO_Enable>:
// --------------------------------------------------------
// Initialization
// --------------------------------------------------------

// Enable the GPIO port peripheral clock for the specified pin
void GPIO_Enable(Pin_t pin) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	463b      	mov	r3, r7
 8000d84:	e883 0003 	stmia.w	r3, {r0, r1}
    GPIO_PortEnable(pin.port);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f804 	bl	8000d98 <GPIO_PortEnable>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <GPIO_PortEnable>:

// Enable the GPIO port peripheral clock for the specified GPIO port
void GPIO_PortEnable(GPIO_TypeDef *port) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
    if (port == GPIOX)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <GPIO_PortEnable+0x40>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <GPIO_PortEnable+0x1e>
        I2C_Enable(LeafyI2C);  // Enable I/O Expander (virtual port)
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <GPIO_PortEnable+0x44>)
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db0:	f000 f9e8 	bl	8001184 <I2C_Enable>
    else
        RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN << GPIO_PORT_NUM(port);  // Enable real GPIO port clock
}
 8000db4:	e00b      	b.n	8000dce <GPIO_PortEnable+0x36>
        RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN << GPIO_PORT_NUM(port);  // Enable real GPIO port clock
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <GPIO_PortEnable+0x48>)
 8000db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 8000dc0:	0a9b      	lsrs	r3, r3, #10
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4905      	ldr	r1, [pc, #20]	@ (8000de0 <GPIO_PortEnable+0x48>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000e0 	.word	0x200000e0
 8000ddc:	20000148 	.word	0x20000148
 8000de0:	40021000 	.word	0x40021000

08000de4 <GPIO_Mode>:

// Set the operating mode of a GPIO pin:
//   Input (IN), Output (OUT), Alternate Function (AF), or Analog (ANA)
void GPIO_Mode(Pin_t pin, PinMode_t mode) {
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	e883 0003 	stmia.w	r3, {r0, r1}
 8000df2:	4613      	mov	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
    pin.port->MODER &= ~(0b11 << (2 * pin.bit));          // clear mode bits
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2103      	movs	r1, #3
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
    pin.port->MODER |= ((mode & 0b11) << (2 * pin.bit));  // set mode bits
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 0103 	and.w	r1, r3, #3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <GPIO_Config>:

// Configure additional settings for a GPIO pin
void GPIO_Config(Pin_t pin, PinType_t ot, PinSpeed_t osp, PinPUPD_t pupd) {
 8000e34:	b490      	push	{r4, r7}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	f107 0408 	add.w	r4, r7, #8
 8000e3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	71bb      	strb	r3, [r7, #6]
    // Configure Output Type (OTYPER)
    pin.port->OTYPER &= ~(1 << pin.bit);
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	400a      	ands	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
    pin.port->OTYPER |= (ot << pin.bit);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	79f9      	ldrb	r1, [r7, #7]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	605a      	str	r2, [r3, #4]

    // Configure Output Speed (OSPEEDR)
    pin.port->OSPEEDR &= ~(0b11 << (2 * pin.bit));
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2103      	movs	r1, #3
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	609a      	str	r2, [r3, #8]
    pin.port->OSPEEDR |= (osp << (2 * pin.bit));
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	79b9      	ldrb	r1, [r7, #6]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	609a      	str	r2, [r3, #8]

    // Configure Pull-up / Pull-down (PUPDR)
    pin.port->PUPDR &= ~(0b11 << (2 * pin.bit));
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2103      	movs	r1, #3
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	400a      	ands	r2, r1
 8000ebc:	60da      	str	r2, [r3, #12]
    pin.port->PUPDR |= (pupd << (2 * pin.bit));
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	7e39      	ldrb	r1, [r7, #24]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc90      	pop	{r4, r7}
 8000edc:	4770      	bx	lr

08000ede <GPIO_AltFunc>:

// Select which alternate function is to be used in ALTFUNC mode
void GPIO_AltFunc(Pin_t pin, int af) {
 8000ede:	b480      	push	{r7}
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000eec:	607a      	str	r2, [r7, #4]
    if (pin.bit < 8) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	dc17      	bgt.n	8000f24 <GPIO_AltFunc+0x46>
        // AFRL
        pin.port->AFR[0] &= ~(0xF << (4 * pin.bit));
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	6a1a      	ldr	r2, [r3, #32]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	210f      	movs	r1, #15
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	400a      	ands	r2, r1
 8000f0a:	621a      	str	r2, [r3, #32]
        pin.port->AFR[0] |=  (af  << (4 * pin.bit));
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	621a      	str	r2, [r3, #32]
        // AFRH
        int bitpos = pin.bit - 8;
        pin.port->AFR[1] &= ~(0xF << (4 * bitpos));
        pin.port->AFR[1] |=  (af  << (4 * bitpos));
    }
}
 8000f22:	e019      	b.n	8000f58 <GPIO_AltFunc+0x7a>
        int bitpos = pin.bit - 8;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3b08      	subs	r3, #8
 8000f28:	617b      	str	r3, [r7, #20]
        pin.port->AFR[1] &= ~(0xF << (4 * bitpos));
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	210f      	movs	r1, #15
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	400a      	ands	r2, r1
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
        pin.port->AFR[1] |=  (af  << (4 * bitpos));
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <GPIO_PortInput>:
PinState_t GPIO_Input(Pin_t pin) {
    return (pin.port->IDR & (1 << pin.bit)) ? HIGH : LOW;
}

// Observe the states of an entire input port
uint16_t GPIO_PortInput(GPIO_TypeDef *port) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    return port->IDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	b29b      	uxth	r3, r3
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <GPIO_PortOutput>:
            pin.port->BSRR = (1 << (pin.bit + 16));   // reset bit
    }
}

// Control the states of an entire output port
void GPIO_PortOutput(GPIO_TypeDef *port, uint16_t states) {
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
    port->ODR = states;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <GPIO_IRQHandler>:
    NVIC->ISER[(EXTI0_IRQn + pin.bit) / 32] = 1 << ((EXTI0_IRQn + pin.bit) % 32);
    __COMPILER_BARRIER();
}

// Interrupt handler for all GPIO pins
void GPIO_IRQHandler(int i) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    NVIC->ICPR[(EXTI0_IRQn + i) / 32] = 1 << ((EXTI0_IRQn + i) % 32);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	330b      	adds	r3, #11
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	2201      	movs	r2, #1
 8000fae:	fa02 f103 	lsl.w	r1, r2, r3
 8000fb2:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <GPIO_IRQHandler+0x9c>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	330b      	adds	r3, #11
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da00      	bge.n	8000fbe <GPIO_IRQHandler+0x22>
 8000fbc:	331f      	adds	r3, #31
 8000fbe:	115b      	asrs	r3, r3, #5
 8000fc0:	3360      	adds	r3, #96	@ 0x60
 8000fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Rising edge
    if (EXTI->RPR1 & (1 << i)) {
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <GPIO_IRQHandler+0xa0>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2101      	movs	r1, #1
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d011      	beq.n	8000ffc <GPIO_IRQHandler+0x60>
        EXTI->RPR1 = (1 << i);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <GPIO_IRQHandler+0xa0>)
 8000fe0:	60da      	str	r2, [r3, #12]
        if (callbacks[i][RISE]) callbacks[i][RISE]();
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <GPIO_IRQHandler+0xa4>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <GPIO_IRQHandler+0x60>
 8000ff0:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <GPIO_IRQHandler+0xa4>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4798      	blx	r3
    }

    // Falling edge
    if (EXTI->FPR1 & (1 << i)) {
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <GPIO_IRQHandler+0xa0>)
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2101      	movs	r1, #1
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00f      	beq.n	800102e <GPIO_IRQHandler+0x92>
        EXTI->FPR1 = (1 << i);
 800100e:	2201      	movs	r2, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	409a      	lsls	r2, r3
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <GPIO_IRQHandler+0xa0>)
 8001016:	611a      	str	r2, [r3, #16]
        if (callbacks[i][FALL]) callbacks[i][FALL]();
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <GPIO_IRQHandler+0xa4>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <GPIO_IRQHandler+0x92>
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <GPIO_IRQHandler+0xa4>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800102c:	4798      	blx	r3
    }
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	4002f400 	.word	0x4002f400
 8001040:	20000204 	.word	0x20000204

08001044 <EXTI0_IRQHandler>:

// Dispatch all GPIO IRQs to common handler function
void EXTI0_IRQHandler()  { GPIO_IRQHandler(0); }
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff ffa7 	bl	8000f9c <GPIO_IRQHandler>
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()  { GPIO_IRQHandler(1); }
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ffa0 	bl	8000f9c <GPIO_IRQHandler>
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()  { GPIO_IRQHandler(2); }
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff ff99 	bl	8000f9c <GPIO_IRQHandler>
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()  { GPIO_IRQHandler(3); }
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
 8001072:	2003      	movs	r0, #3
 8001074:	f7ff ff92 	bl	8000f9c <GPIO_IRQHandler>
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()  { GPIO_IRQHandler(4); }
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
 8001080:	2004      	movs	r0, #4
 8001082:	f7ff ff8b 	bl	8000f9c <GPIO_IRQHandler>
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <EXTI5_IRQHandler>:
void EXTI5_IRQHandler()  { GPIO_IRQHandler(5); }
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
 800108e:	2005      	movs	r0, #5
 8001090:	f7ff ff84 	bl	8000f9c <GPIO_IRQHandler>
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <EXTI6_IRQHandler>:
void EXTI6_IRQHandler()  { GPIO_IRQHandler(6); }
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
 800109c:	2006      	movs	r0, #6
 800109e:	f7ff ff7d 	bl	8000f9c <GPIO_IRQHandler>
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <EXTI7_IRQHandler>:
void EXTI7_IRQHandler()  { GPIO_IRQHandler(7); }
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	2007      	movs	r0, #7
 80010ac:	f7ff ff76 	bl	8000f9c <GPIO_IRQHandler>
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <EXTI8_IRQHandler>:
void EXTI8_IRQHandler()  { GPIO_IRQHandler(8); }
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	2008      	movs	r0, #8
 80010ba:	f7ff ff6f 	bl	8000f9c <GPIO_IRQHandler>
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <EXTI9_IRQHandler>:
void EXTI9_IRQHandler()  { GPIO_IRQHandler(9); }
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	2009      	movs	r0, #9
 80010c8:	f7ff ff68 	bl	8000f9c <GPIO_IRQHandler>
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <EXTI10_IRQHandler>:
void EXTI10_IRQHandler() { GPIO_IRQHandler(10); }
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	200a      	movs	r0, #10
 80010d6:	f7ff ff61 	bl	8000f9c <GPIO_IRQHandler>
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <EXTI11_IRQHandler>:
void EXTI11_IRQHandler() { GPIO_IRQHandler(11); }
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	200b      	movs	r0, #11
 80010e4:	f7ff ff5a 	bl	8000f9c <GPIO_IRQHandler>
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <EXTI12_IRQHandler>:
void EXTI12_IRQHandler() { GPIO_IRQHandler(12); }
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	200c      	movs	r0, #12
 80010f2:	f7ff ff53 	bl	8000f9c <GPIO_IRQHandler>
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <EXTI13_IRQHandler>:
void EXTI13_IRQHandler() { GPIO_IRQHandler(13); }
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	200d      	movs	r0, #13
 8001100:	f7ff ff4c 	bl	8000f9c <GPIO_IRQHandler>
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <EXTI14_IRQHandler>:
void EXTI14_IRQHandler() { GPIO_IRQHandler(14); }
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
 800110c:	200e      	movs	r0, #14
 800110e:	f7ff ff45 	bl	8000f9c <GPIO_IRQHandler>
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <EXTI15_IRQHandler>:
void EXTI15_IRQHandler() { GPIO_IRQHandler(15); }
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
 800111a:	200f      	movs	r0, #15
 800111c:	f7ff ff3e 	bl	8000f9c <GPIO_IRQHandler>
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <UpdateIOExpanders>:
// I2C transfer structures (bus, addr, data, size, stop, busy, next)
static I2C_Xfer_t IOX_LEDs = {&LeafyI2C, 0x70, &IOX_txData, 1, 1, 0, NULL};
static I2C_Xfer_t IOX_PBs  = {&LeafyI2C, 0x73, &IOX_rxData, 1, 1, 0, NULL};

// Update I/O Expander data
void UpdateIOExpanders(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    // Copy to/from data buffers with polarity inversion
    IOX_txData = ~(GPIOX->ODR & 0xFF);  // LEDs in bits 7:0
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <UpdateIOExpanders+0x4c>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <UpdateIOExpanders+0x50>)
 8001134:	701a      	strb	r2, [r3, #0]
    GPIOX->IDR = (~IOX_rxData) << 8;    // PBs in bits 15:8
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <UpdateIOExpanders+0x54>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	43db      	mvns	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4a0c      	ldr	r2, [pc, #48]	@ (8001170 <UpdateIOExpanders+0x4c>)
 8001140:	6113      	str	r3, [r2, #16]

    // Keep requesting transfers to/from I/O expanders
    if (!IOX_LEDs.busy)
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <UpdateIOExpanders+0x58>)
 8001144:	7c5b      	ldrb	r3, [r3, #17]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <UpdateIOExpanders+0x32>
        I2C_Request(&IOX_LEDs);
 8001150:	480a      	ldr	r0, [pc, #40]	@ (800117c <UpdateIOExpanders+0x58>)
 8001152:	f000 f89f 	bl	8001294 <I2C_Request>
    if (!IOX_PBs.busy)
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <UpdateIOExpanders+0x5c>)
 8001158:	7c5b      	ldrb	r3, [r3, #17]
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <UpdateIOExpanders+0x46>
        I2C_Request(&IOX_PBs);
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <UpdateIOExpanders+0x5c>)
 8001166:	f000 f895 	bl	8001294 <I2C_Request>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000e0 	.word	0x200000e0
 8001174:	20000114 	.word	0x20000114
 8001178:	20000115 	.word	0x20000115
 800117c:	20000118 	.word	0x20000118
 8001180:	20000130 	.word	0x20000130

08001184 <I2C_Enable>:
// Bit 0 of address byte indicates read vs write transfer
#define I2C_READ  (head->addr & 0x1)
#define I2C_WRITE (!(head->addr & 0x1))

// Enable I2C controller and configure associated GPIO pins
void I2C_Enable(I2C_Bus_t bus) {
 8001184:	b084      	sub	sp, #16
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af02      	add	r7, sp, #8
 800118c:	f107 0c08 	add.w	ip, r7, #8
 8001190:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (bus.iface->CR1 & I2C_CR1_PE)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d168      	bne.n	8001272 <I2C_Enable+0xee>
        return; // Already enabled

    // Enable clock to selected I2C controller
    RCC->APB1ENR1 |= bus.iface == I2C1 ? RCC_APB1ENR1_I2C1EN :
 80011a0:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <I2C_Enable+0xfc>)
 80011a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4937      	ldr	r1, [pc, #220]	@ (8001284 <I2C_Enable+0x100>)
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d015      	beq.n	80011d8 <I2C_Enable+0x54>
                      bus.iface == I2C2 ? RCC_APB1ENR1_I2C2EN :
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4936      	ldr	r1, [pc, #216]	@ (8001288 <I2C_Enable+0x104>)
 80011b0:	428b      	cmp	r3, r1
 80011b2:	d00e      	beq.n	80011d2 <I2C_Enable+0x4e>
                      bus.iface == I2C3 ? RCC_APB1ENR1_I2C3EN :
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4935      	ldr	r1, [pc, #212]	@ (800128c <I2C_Enable+0x108>)
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d007      	beq.n	80011cc <I2C_Enable+0x48>
                      bus.iface == I2C4 ? RCC_APB1ENR2_I2C4EN : 0;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4934      	ldr	r1, [pc, #208]	@ (8001290 <I2C_Enable+0x10c>)
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d101      	bne.n	80011c8 <I2C_Enable+0x44>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e009      	b.n	80011dc <I2C_Enable+0x58>
 80011c8:	2300      	movs	r3, #0
 80011ca:	e007      	b.n	80011dc <I2C_Enable+0x58>
                      bus.iface == I2C3 ? RCC_APB1ENR1_I2C3EN :
 80011cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80011d0:	e004      	b.n	80011dc <I2C_Enable+0x58>
                      bus.iface == I2C2 ? RCC_APB1ENR1_I2C2EN :
 80011d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011d6:	e001      	b.n	80011dc <I2C_Enable+0x58>
    RCC->APB1ENR1 |= bus.iface == I2C1 ? RCC_APB1ENR1_I2C1EN :
 80011d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011dc:	4928      	ldr	r1, [pc, #160]	@ (8001280 <I2C_Enable+0xfc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	658b      	str	r3, [r1, #88]	@ 0x58

    // Enable clocks to GPIO ports containing SDA and SCL pins
    GPIO_Enable(bus.pinSDA);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ea:	f7ff fdc7 	bl	8000d7c <GPIO_Enable>
    GPIO_Enable(bus.pinSCL);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011f6:	f7ff fdc1 	bl	8000d7c <GPIO_Enable>

    // Configure for open drain (PMOS disabled)
    GPIO_Config(bus.pinSDA, OD, S0, NOPUPD);
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2300      	movs	r3, #0
 8001200:	2201      	movs	r2, #1
 8001202:	f107 010c 	add.w	r1, r7, #12
 8001206:	c903      	ldmia	r1, {r0, r1}
 8001208:	f7ff fe14 	bl	8000e34 <GPIO_Config>
    GPIO_Config(bus.pinSCL, OD, S0, NOPUPD);
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	2201      	movs	r2, #1
 8001214:	f107 0114 	add.w	r1, r7, #20
 8001218:	c903      	ldmia	r1, {r0, r1}
 800121a:	f7ff fe0b 	bl	8000e34 <GPIO_Config>

    // Select alternate function as I2C
    GPIO_AltFunc(bus.pinSDA, 0x4);
 800121e:	2204      	movs	r2, #4
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001228:	f7ff fe59 	bl	8000ede <GPIO_AltFunc>
    GPIO_AltFunc(bus.pinSCL, 0x4);
 800122c:	2204      	movs	r2, #4
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001236:	f7ff fe52 	bl	8000ede <GPIO_AltFunc>

    // Alternate function mode
    GPIO_Mode(bus.pinSDA, ALTFUNC);
 800123a:	2202      	movs	r2, #2
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001244:	f7ff fdce 	bl	8000de4 <GPIO_Mode>
    GPIO_Mode(bus.pinSCL, ALTFUNC);
 8001248:	2202      	movs	r2, #2
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001252:	f7ff fdc7 	bl	8000de4 <GPIO_Mode>

    // Configure I2C peripheral
    bus.iface->CR1 &= ~I2C_CR1_PE;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
    bus.iface->TIMINGR = 0xE14;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001268:	611a      	str	r2, [r3, #16]
    bus.iface->CR1 = I2C_CR1_PE;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e000      	b.n	8001274 <I2C_Enable+0xf0>
        return; // Already enabled
 8001272:	bf00      	nop
}
 8001274:	46bd      	mov	sp, r7
 8001276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800127a:	b004      	add	sp, #16
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	40005400 	.word	0x40005400
 8001288:	40005800 	.word	0x40005800
 800128c:	40005c00 	.word	0x40005c00
 8001290:	40008400 	.word	0x40008400

08001294 <I2C_Request>:

// Add a transfer request to the queue
void I2C_Request(I2C_Xfer_t *p) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    if (head == NULL)
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <I2C_Request+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <I2C_Request+0x18>
        head = p; // Add to empty queue
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <I2C_Request+0x40>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e003      	b.n	80012b4 <I2C_Request+0x20>
    else
        tail->next = p; // Add to tail of non-empty queue
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <I2C_Request+0x44>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	615a      	str	r2, [r3, #20]
    tail = p;
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <I2C_Request+0x44>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
    p->next = NULL;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    p->busy = true; // Mark transfer as in-progress
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	745a      	strb	r2, [r3, #17]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000284 	.word	0x20000284
 80012d8:	20000288 	.word	0x20000288

080012dc <ServiceI2CRequests>:

// Polling implementation, called from main loop every tick
void ServiceI2CRequests(void) {
 80012dc:	b490      	push	{r4, r7}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
    if (head == NULL)
 80012e2:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <ServiceI2CRequests+0xe4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d064      	beq.n	80013b4 <ServiceI2CRequests+0xd8>
        return; // Nothing to do right now

    I2C_Xfer_t *q = head;
 80012ea:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <ServiceI2CRequests+0xe4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	607b      	str	r3, [r7, #4]
    I2C_TypeDef *i2c = q->bus->iface;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	603b      	str	r3, [r7, #0]

    if (n == -1) {
 80012f8:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d11e      	bne.n	8001340 <ServiceI2CRequests+0x64>
        // Begin a new transfer
        n = 0;
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
        i2c->ICR = 0xFFFF; // Clear flags
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130e:	61da      	str	r2, [r3, #28]
        i2c->CR2 = (q->addr & 0xFE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	791b      	ldrb	r3, [r3, #4]
 8001314:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
                 | I2C_READ << I2C_CR2_RD_WRN_Pos
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <ServiceI2CRequests+0xe4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001324:	431a      	orrs	r2, r3
                 | q->size << I2C_CR2_NBYTES_Pos
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	431a      	orrs	r2, r3
                 | q->stop << I2C_CR2_AUTOEND_Pos
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7c1b      	ldrb	r3, [r3, #16]
 8001332:	065b      	lsls	r3, r3, #25
 8001334:	4313      	orrs	r3, r2
                 | I2C_CR2_START;
 8001336:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
        i2c->CR2 = (q->addr & 0xFE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e03a      	b.n	80013b6 <ServiceI2CRequests+0xda>
    }
    else if (n < q->size) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	dd24      	ble.n	8001396 <ServiceI2CRequests+0xba>
        if (i2c->ISR & I2C_ISR_TXIS)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <ServiceI2CRequests+0x94>
            // Copy transmit data from memory buffer to hardware buffer
            i2c->TXDR = q->data[n++];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1c59      	adds	r1, r3, #1
 8001362:	4818      	ldr	r0, [pc, #96]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 8001364:	6001      	str	r1, [r0, #0]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28

        if (i2c->ISR & I2C_ISR_RXNE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01c      	beq.n	80013b6 <ServiceI2CRequests+0xda>
            // Copy receive data from hardware buffer to memory buffer
            q->data[n++] = i2c->RXDR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1c59      	adds	r1, r3, #1
 800138a:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 800138c:	6001      	str	r1, [r0, #0]
 800138e:	4413      	add	r3, r2
 8001390:	b2e2      	uxtb	r2, r4
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e00f      	b.n	80013b6 <ServiceI2CRequests+0xda>
    }
    else {
        // Remove transfer from head of queue
        head = q->next;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <ServiceI2CRequests+0xe4>)
 800139c:	6013      	str	r3, [r2, #0]
        q->next = NULL;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
        q->busy = 0; // Mark transfer as complete
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	745a      	strb	r2, [r3, #17]
        n = -1;      // Prepare for next transfer
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <ServiceI2CRequests+0xe8>)
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e000      	b.n	80013b6 <ServiceI2CRequests+0xda>
        return; // Nothing to do right now
 80013b4:	bf00      	nop
    }
}
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc90      	pop	{r4, r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000284 	.word	0x20000284
 80013c4:	2000015c 	.word	0x2000015c

080013c8 <main>:
#include "alarm.h"
#include "game.h"
#include "display.h"   // ✅ Added as per Lab 2 instructions

int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af02      	add	r7, sp, #8
    // ----------------------------------------------------
    // Initialization
    // ----------------------------------------------------
    StartSysTick();         // Enable system tick timer
 80013ce:	f000 f84d 	bl	800146c <StartSysTick>
    I2C_Enable(LeafyI2C);   // Enable I2C peripheral
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <main+0x34>)
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013da:	f7ff fed3 	bl	8001184 <I2C_Enable>
    // --------------------------------------------------------
    void CallbackSelectPress(void);
    void CallbackSelectRelease(void);

//    Init_Alarm();           // Initialize alarm system
    Init_Game();            // Initialize game system
 80013de:	f7fe fff1 	bl	80003c4 <Init_Game>
    // ----------------------------------------------------
    // Main loop
    // ----------------------------------------------------
    while (1) {
//        Task_Alarm();           // Handle alarm state machine
        Task_Game();            // Handle game logic
 80013e2:	f7ff f82f 	bl	8000444 <Task_Game>

        // ------------------------------------------------
        // Housekeeping
        // ------------------------------------------------
        UpdateIOExpanders();    // Update LED/button I/O expanders
 80013e6:	f7ff fe9d 	bl	8001124 <UpdateIOExpanders>
        UpdateDisplay();        // ✅ Added right after UpdateIOExpanders()
 80013ea:	f7fe ff95 	bl	8000318 <UpdateDisplay>
        ServiceI2CRequests();   // Handle queued I2C transactions
 80013ee:	f7ff ff75 	bl	80012dc <ServiceI2CRequests>
        WaitForSysTick();       // 1 ms tick delay
 80013f2:	f000 f867 	bl	80014c4 <WaitForSysTick>
    while (1) {
 80013f6:	bf00      	nop
 80013f8:	e7f3      	b.n	80013e2 <main+0x1a>
 80013fa:	bf00      	nop
 80013fc:	20000148 	.word	0x20000148

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f000 f922 	bl	8001678 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20030000 	.word	0x20030000
 8001460:	00000400 	.word	0x00000400
 8001464:	2000028c 	.word	0x2000028c
 8001468:	200003e0 	.word	0x200003e0

0800146c <StartSysTick>:

#define SYSTICKS 4000  // 1ms with 4MHz clock

static volatile Time_t sysTime = 0;

void StartSysTick() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
    sysTime = 0;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <StartSysTick+0x30>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = (uint32_t)(SYSTICKS - 1);  // Set reload register value
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <StartSysTick+0x34>)
 8001478:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800147c:	605a      	str	r2, [r3, #4]
    SCB->SHPR[12+SysTick_IRQn] = 7 << 5;       // Set interrupt priority
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <StartSysTick+0x38>)
 8001480:	22e0      	movs	r2, #224	@ 0xe0
 8001482:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    SysTick->VAL = 0;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <StartSysTick+0x34>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <StartSysTick+0x34>)
 800148e:	2207      	movs	r2, #7
 8001490:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk   |
                    SysTick_CTRL_ENABLE_Msk;
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20000290 	.word	0x20000290
 80014a0:	e000e010 	.word	0xe000e010
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <SysTick_Handler>:

// Interrupt handler
void SysTick_Handler(void) {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    sysTime++;
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <SysTick_Handler+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a03      	ldr	r2, [pc, #12]	@ (80014c0 <SysTick_Handler+0x18>)
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	20000290 	.word	0x20000290

080014c4 <WaitForSysTick>:

// Wait for system time to change
void WaitForSysTick(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
    int wasTime = sysTime;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <WaitForSysTick+0x28>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	607b      	str	r3, [r7, #4]
    while (sysTime == wasTime)
 80014d0:	e000      	b.n	80014d4 <WaitForSysTick+0x10>
        __asm volatile ("wfi");  // keep CPU asleep until next interrupt
 80014d2:	bf30      	wfi
    while (sysTime == wasTime)
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <WaitForSysTick+0x28>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d0f9      	beq.n	80014d2 <WaitForSysTick+0xe>
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000290 	.word	0x20000290

080014f0 <msDelay>:

// Delay measured in milliseconds
void msDelay(int t) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < t; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e004      	b.n	8001508 <msDelay+0x18>
        WaitForSysTick();
 80014fe:	f7ff ffe1 	bl	80014c4 <WaitForSysTick>
    for (int i = 0; i < t; i++)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf6      	blt.n	80014fe <msDelay+0xe>
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <TimeNow>:

// Obtain the current system time
Time_t TimeNow(void) {
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
    return sysTime;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <TimeNow+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000290 	.word	0x20000290

08001534 <TimePassed>:

// Calculate elapsed time since a previous event
Time_t TimePassed(Time_t since) {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    Time_t now = sysTime;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <TimePassed+0x30>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
    if (now >= since)
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d303      	bcc.n	8001552 <TimePassed+0x1e>
        return now - since;
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	e002      	b.n	8001558 <TimePassed+0x24>
    else  // handle rollover
        return now + 1 + TIME_MAX - since;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1ad3      	subs	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20000290 	.word	0x20000290

08001568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopForever+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001596:	f000 f875 	bl	8001684 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800159a:	f7ff ff15 	bl	80013c8 <main>

0800159e <LoopForever>:

LoopForever:
  b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   r0, =_estack
 80015a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80015ac:	080020a4 	.word	0x080020a4
  ldr r2, =_sbss
 80015b0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80015b4:	200003dc 	.word	0x200003dc

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <siprintf>:
 80015bc:	b40e      	push	{r1, r2, r3}
 80015be:	b510      	push	{r4, lr}
 80015c0:	b09d      	sub	sp, #116	@ 0x74
 80015c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80015c6:	2400      	movs	r4, #0
 80015c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80015ca:	9002      	str	r0, [sp, #8]
 80015cc:	9006      	str	r0, [sp, #24]
 80015ce:	9107      	str	r1, [sp, #28]
 80015d0:	9104      	str	r1, [sp, #16]
 80015d2:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <siprintf+0x3c>)
 80015d4:	4909      	ldr	r1, [pc, #36]	@ (80015fc <siprintf+0x40>)
 80015d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80015da:	9105      	str	r1, [sp, #20]
 80015dc:	a902      	add	r1, sp, #8
 80015de:	6800      	ldr	r0, [r0, #0]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80015e4:	f000 f9c8 	bl	8001978 <_svfiprintf_r>
 80015e8:	9b02      	ldr	r3, [sp, #8]
 80015ea:	701c      	strb	r4, [r3, #0]
 80015ec:	b01d      	add	sp, #116	@ 0x74
 80015ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f2:	b003      	add	sp, #12
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000160 	.word	0x20000160
 80015fc:	ffff0208 	.word	0xffff0208

08001600 <_vsniprintf_r>:
 8001600:	b530      	push	{r4, r5, lr}
 8001602:	4614      	mov	r4, r2
 8001604:	b09b      	sub	sp, #108	@ 0x6c
 8001606:	4605      	mov	r5, r0
 8001608:	461a      	mov	r2, r3
 800160a:	2c00      	cmp	r4, #0
 800160c:	da05      	bge.n	800161a <_vsniprintf_r+0x1a>
 800160e:	238b      	movs	r3, #139	@ 0x8b
 8001610:	6003      	str	r3, [r0, #0]
 8001612:	f04f 30ff 	mov.w	r0, #4294967295
 8001616:	b01b      	add	sp, #108	@ 0x6c
 8001618:	bd30      	pop	{r4, r5, pc}
 800161a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800161e:	9100      	str	r1, [sp, #0]
 8001620:	9104      	str	r1, [sp, #16]
 8001622:	4669      	mov	r1, sp
 8001624:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	9319      	str	r3, [sp, #100]	@ 0x64
 800162e:	bf14      	ite	ne
 8001630:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001634:	4623      	moveq	r3, r4
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	9305      	str	r3, [sp, #20]
 800163a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001642:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001644:	f000 f998 	bl	8001978 <_svfiprintf_r>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	bfbc      	itt	lt
 800164c:	238b      	movlt	r3, #139	@ 0x8b
 800164e:	602b      	strlt	r3, [r5, #0]
 8001650:	2c00      	cmp	r4, #0
 8001652:	d0e0      	beq.n	8001616 <_vsniprintf_r+0x16>
 8001654:	9b00      	ldr	r3, [sp, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	e7dc      	b.n	8001616 <_vsniprintf_r+0x16>

0800165c <vsniprintf>:
 800165c:	b507      	push	{r0, r1, r2, lr}
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	4601      	mov	r1, r0
 8001666:	4803      	ldr	r0, [pc, #12]	@ (8001674 <vsniprintf+0x18>)
 8001668:	6800      	ldr	r0, [r0, #0]
 800166a:	f7ff ffc9 	bl	8001600 <_vsniprintf_r>
 800166e:	b003      	add	sp, #12
 8001670:	f85d fb04 	ldr.w	pc, [sp], #4
 8001674:	20000160 	.word	0x20000160

08001678 <__errno>:
 8001678:	4b01      	ldr	r3, [pc, #4]	@ (8001680 <__errno+0x8>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000160 	.word	0x20000160

08001684 <__libc_init_array>:
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	4d0d      	ldr	r5, [pc, #52]	@ (80016bc <__libc_init_array+0x38>)
 8001688:	2600      	movs	r6, #0
 800168a:	4c0d      	ldr	r4, [pc, #52]	@ (80016c0 <__libc_init_array+0x3c>)
 800168c:	1b64      	subs	r4, r4, r5
 800168e:	10a4      	asrs	r4, r4, #2
 8001690:	42a6      	cmp	r6, r4
 8001692:	d109      	bne.n	80016a8 <__libc_init_array+0x24>
 8001694:	4d0b      	ldr	r5, [pc, #44]	@ (80016c4 <__libc_init_array+0x40>)
 8001696:	2600      	movs	r6, #0
 8001698:	4c0b      	ldr	r4, [pc, #44]	@ (80016c8 <__libc_init_array+0x44>)
 800169a:	f000 fc75 	bl	8001f88 <_init>
 800169e:	1b64      	subs	r4, r4, r5
 80016a0:	10a4      	asrs	r4, r4, #2
 80016a2:	42a6      	cmp	r6, r4
 80016a4:	d105      	bne.n	80016b2 <__libc_init_array+0x2e>
 80016a6:	bd70      	pop	{r4, r5, r6, pc}
 80016a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ac:	3601      	adds	r6, #1
 80016ae:	4798      	blx	r3
 80016b0:	e7ee      	b.n	8001690 <__libc_init_array+0xc>
 80016b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b6:	3601      	adds	r6, #1
 80016b8:	4798      	blx	r3
 80016ba:	e7f2      	b.n	80016a2 <__libc_init_array+0x1e>
 80016bc:	0800209c 	.word	0x0800209c
 80016c0:	0800209c 	.word	0x0800209c
 80016c4:	0800209c 	.word	0x0800209c
 80016c8:	080020a0 	.word	0x080020a0

080016cc <__retarget_lock_acquire_recursive>:
 80016cc:	4770      	bx	lr

080016ce <__retarget_lock_release_recursive>:
 80016ce:	4770      	bx	lr

080016d0 <_free_r>:
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4605      	mov	r5, r0
 80016d4:	2900      	cmp	r1, #0
 80016d6:	d041      	beq.n	800175c <_free_r+0x8c>
 80016d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016dc:	1f0c      	subs	r4, r1, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bfb8      	it	lt
 80016e2:	18e4      	addlt	r4, r4, r3
 80016e4:	f000 f8e0 	bl	80018a8 <__malloc_lock>
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <_free_r+0x90>)
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	b933      	cbnz	r3, 80016fc <_free_r+0x2c>
 80016ee:	6063      	str	r3, [r4, #4]
 80016f0:	6014      	str	r4, [r2, #0]
 80016f2:	4628      	mov	r0, r5
 80016f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016f8:	f000 b8dc 	b.w	80018b4 <__malloc_unlock>
 80016fc:	42a3      	cmp	r3, r4
 80016fe:	d908      	bls.n	8001712 <_free_r+0x42>
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	1821      	adds	r1, r4, r0
 8001704:	428b      	cmp	r3, r1
 8001706:	bf01      	itttt	eq
 8001708:	6819      	ldreq	r1, [r3, #0]
 800170a:	685b      	ldreq	r3, [r3, #4]
 800170c:	1809      	addeq	r1, r1, r0
 800170e:	6021      	streq	r1, [r4, #0]
 8001710:	e7ed      	b.n	80016ee <_free_r+0x1e>
 8001712:	461a      	mov	r2, r3
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	b10b      	cbz	r3, 800171c <_free_r+0x4c>
 8001718:	42a3      	cmp	r3, r4
 800171a:	d9fa      	bls.n	8001712 <_free_r+0x42>
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	1850      	adds	r0, r2, r1
 8001720:	42a0      	cmp	r0, r4
 8001722:	d10b      	bne.n	800173c <_free_r+0x6c>
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	4401      	add	r1, r0
 8001728:	1850      	adds	r0, r2, r1
 800172a:	6011      	str	r1, [r2, #0]
 800172c:	4283      	cmp	r3, r0
 800172e:	d1e0      	bne.n	80016f2 <_free_r+0x22>
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4408      	add	r0, r1
 8001736:	6053      	str	r3, [r2, #4]
 8001738:	6010      	str	r0, [r2, #0]
 800173a:	e7da      	b.n	80016f2 <_free_r+0x22>
 800173c:	d902      	bls.n	8001744 <_free_r+0x74>
 800173e:	230c      	movs	r3, #12
 8001740:	602b      	str	r3, [r5, #0]
 8001742:	e7d6      	b.n	80016f2 <_free_r+0x22>
 8001744:	6820      	ldr	r0, [r4, #0]
 8001746:	1821      	adds	r1, r4, r0
 8001748:	428b      	cmp	r3, r1
 800174a:	bf02      	ittt	eq
 800174c:	6819      	ldreq	r1, [r3, #0]
 800174e:	685b      	ldreq	r3, [r3, #4]
 8001750:	1809      	addeq	r1, r1, r0
 8001752:	6063      	str	r3, [r4, #4]
 8001754:	bf08      	it	eq
 8001756:	6021      	streq	r1, [r4, #0]
 8001758:	6054      	str	r4, [r2, #4]
 800175a:	e7ca      	b.n	80016f2 <_free_r+0x22>
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	200003d8 	.word	0x200003d8

08001764 <sbrk_aligned>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	4e0f      	ldr	r6, [pc, #60]	@ (80017a4 <sbrk_aligned+0x40>)
 8001768:	460c      	mov	r4, r1
 800176a:	4605      	mov	r5, r0
 800176c:	6831      	ldr	r1, [r6, #0]
 800176e:	b911      	cbnz	r1, 8001776 <sbrk_aligned+0x12>
 8001770:	f000 fba8 	bl	8001ec4 <_sbrk_r>
 8001774:	6030      	str	r0, [r6, #0]
 8001776:	4621      	mov	r1, r4
 8001778:	4628      	mov	r0, r5
 800177a:	f000 fba3 	bl	8001ec4 <_sbrk_r>
 800177e:	1c43      	adds	r3, r0, #1
 8001780:	d103      	bne.n	800178a <sbrk_aligned+0x26>
 8001782:	f04f 34ff 	mov.w	r4, #4294967295
 8001786:	4620      	mov	r0, r4
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	1cc4      	adds	r4, r0, #3
 800178c:	f024 0403 	bic.w	r4, r4, #3
 8001790:	42a0      	cmp	r0, r4
 8001792:	d0f8      	beq.n	8001786 <sbrk_aligned+0x22>
 8001794:	1a21      	subs	r1, r4, r0
 8001796:	4628      	mov	r0, r5
 8001798:	f000 fb94 	bl	8001ec4 <_sbrk_r>
 800179c:	3001      	adds	r0, #1
 800179e:	d1f2      	bne.n	8001786 <sbrk_aligned+0x22>
 80017a0:	e7ef      	b.n	8001782 <sbrk_aligned+0x1e>
 80017a2:	bf00      	nop
 80017a4:	200003d4 	.word	0x200003d4

080017a8 <_malloc_r>:
 80017a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ac:	1ccd      	adds	r5, r1, #3
 80017ae:	4606      	mov	r6, r0
 80017b0:	f025 0503 	bic.w	r5, r5, #3
 80017b4:	3508      	adds	r5, #8
 80017b6:	2d0c      	cmp	r5, #12
 80017b8:	bf38      	it	cc
 80017ba:	250c      	movcc	r5, #12
 80017bc:	2d00      	cmp	r5, #0
 80017be:	db01      	blt.n	80017c4 <_malloc_r+0x1c>
 80017c0:	42a9      	cmp	r1, r5
 80017c2:	d904      	bls.n	80017ce <_malloc_r+0x26>
 80017c4:	230c      	movs	r3, #12
 80017c6:	6033      	str	r3, [r6, #0]
 80017c8:	2000      	movs	r0, #0
 80017ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018a4 <_malloc_r+0xfc>
 80017d2:	f000 f869 	bl	80018a8 <__malloc_lock>
 80017d6:	f8d8 3000 	ldr.w	r3, [r8]
 80017da:	461c      	mov	r4, r3
 80017dc:	bb44      	cbnz	r4, 8001830 <_malloc_r+0x88>
 80017de:	4629      	mov	r1, r5
 80017e0:	4630      	mov	r0, r6
 80017e2:	f7ff ffbf 	bl	8001764 <sbrk_aligned>
 80017e6:	1c43      	adds	r3, r0, #1
 80017e8:	4604      	mov	r4, r0
 80017ea:	d158      	bne.n	800189e <_malloc_r+0xf6>
 80017ec:	f8d8 4000 	ldr.w	r4, [r8]
 80017f0:	4627      	mov	r7, r4
 80017f2:	2f00      	cmp	r7, #0
 80017f4:	d143      	bne.n	800187e <_malloc_r+0xd6>
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d04b      	beq.n	8001892 <_malloc_r+0xea>
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	4639      	mov	r1, r7
 80017fe:	4630      	mov	r0, r6
 8001800:	eb04 0903 	add.w	r9, r4, r3
 8001804:	f000 fb5e 	bl	8001ec4 <_sbrk_r>
 8001808:	4581      	cmp	r9, r0
 800180a:	d142      	bne.n	8001892 <_malloc_r+0xea>
 800180c:	6821      	ldr	r1, [r4, #0]
 800180e:	4630      	mov	r0, r6
 8001810:	1a6d      	subs	r5, r5, r1
 8001812:	4629      	mov	r1, r5
 8001814:	f7ff ffa6 	bl	8001764 <sbrk_aligned>
 8001818:	3001      	adds	r0, #1
 800181a:	d03a      	beq.n	8001892 <_malloc_r+0xea>
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	442b      	add	r3, r5
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	f8d8 3000 	ldr.w	r3, [r8]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	bb62      	cbnz	r2, 8001884 <_malloc_r+0xdc>
 800182a:	f8c8 7000 	str.w	r7, [r8]
 800182e:	e00f      	b.n	8001850 <_malloc_r+0xa8>
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	1b52      	subs	r2, r2, r5
 8001834:	d420      	bmi.n	8001878 <_malloc_r+0xd0>
 8001836:	2a0b      	cmp	r2, #11
 8001838:	d917      	bls.n	800186a <_malloc_r+0xc2>
 800183a:	1961      	adds	r1, r4, r5
 800183c:	42a3      	cmp	r3, r4
 800183e:	6025      	str	r5, [r4, #0]
 8001840:	bf18      	it	ne
 8001842:	6059      	strne	r1, [r3, #4]
 8001844:	6863      	ldr	r3, [r4, #4]
 8001846:	bf08      	it	eq
 8001848:	f8c8 1000 	streq.w	r1, [r8]
 800184c:	5162      	str	r2, [r4, r5]
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	4630      	mov	r0, r6
 8001852:	f000 f82f 	bl	80018b4 <__malloc_unlock>
 8001856:	f104 000b 	add.w	r0, r4, #11
 800185a:	1d23      	adds	r3, r4, #4
 800185c:	f020 0007 	bic.w	r0, r0, #7
 8001860:	1ac2      	subs	r2, r0, r3
 8001862:	bf1c      	itt	ne
 8001864:	1a1b      	subne	r3, r3, r0
 8001866:	50a3      	strne	r3, [r4, r2]
 8001868:	e7af      	b.n	80017ca <_malloc_r+0x22>
 800186a:	6862      	ldr	r2, [r4, #4]
 800186c:	42a3      	cmp	r3, r4
 800186e:	bf0c      	ite	eq
 8001870:	f8c8 2000 	streq.w	r2, [r8]
 8001874:	605a      	strne	r2, [r3, #4]
 8001876:	e7eb      	b.n	8001850 <_malloc_r+0xa8>
 8001878:	4623      	mov	r3, r4
 800187a:	6864      	ldr	r4, [r4, #4]
 800187c:	e7ae      	b.n	80017dc <_malloc_r+0x34>
 800187e:	463c      	mov	r4, r7
 8001880:	687f      	ldr	r7, [r7, #4]
 8001882:	e7b6      	b.n	80017f2 <_malloc_r+0x4a>
 8001884:	461a      	mov	r2, r3
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	42a3      	cmp	r3, r4
 800188a:	d1fb      	bne.n	8001884 <_malloc_r+0xdc>
 800188c:	2300      	movs	r3, #0
 800188e:	6053      	str	r3, [r2, #4]
 8001890:	e7de      	b.n	8001850 <_malloc_r+0xa8>
 8001892:	230c      	movs	r3, #12
 8001894:	4630      	mov	r0, r6
 8001896:	6033      	str	r3, [r6, #0]
 8001898:	f000 f80c 	bl	80018b4 <__malloc_unlock>
 800189c:	e794      	b.n	80017c8 <_malloc_r+0x20>
 800189e:	6005      	str	r5, [r0, #0]
 80018a0:	e7d6      	b.n	8001850 <_malloc_r+0xa8>
 80018a2:	bf00      	nop
 80018a4:	200003d8 	.word	0x200003d8

080018a8 <__malloc_lock>:
 80018a8:	4801      	ldr	r0, [pc, #4]	@ (80018b0 <__malloc_lock+0x8>)
 80018aa:	f7ff bf0f 	b.w	80016cc <__retarget_lock_acquire_recursive>
 80018ae:	bf00      	nop
 80018b0:	200003d0 	.word	0x200003d0

080018b4 <__malloc_unlock>:
 80018b4:	4801      	ldr	r0, [pc, #4]	@ (80018bc <__malloc_unlock+0x8>)
 80018b6:	f7ff bf0a 	b.w	80016ce <__retarget_lock_release_recursive>
 80018ba:	bf00      	nop
 80018bc:	200003d0 	.word	0x200003d0

080018c0 <__ssputs_r>:
 80018c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c4:	461f      	mov	r7, r3
 80018c6:	688e      	ldr	r6, [r1, #8]
 80018c8:	4682      	mov	sl, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	42be      	cmp	r6, r7
 80018ce:	4690      	mov	r8, r2
 80018d0:	680b      	ldr	r3, [r1, #0]
 80018d2:	d82d      	bhi.n	8001930 <__ssputs_r+0x70>
 80018d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018dc:	d026      	beq.n	800192c <__ssputs_r+0x6c>
 80018de:	6965      	ldr	r5, [r4, #20]
 80018e0:	6909      	ldr	r1, [r1, #16]
 80018e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018e6:	eba3 0901 	sub.w	r9, r3, r1
 80018ea:	1c7b      	adds	r3, r7, #1
 80018ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018f0:	444b      	add	r3, r9
 80018f2:	106d      	asrs	r5, r5, #1
 80018f4:	429d      	cmp	r5, r3
 80018f6:	bf38      	it	cc
 80018f8:	461d      	movcc	r5, r3
 80018fa:	0553      	lsls	r3, r2, #21
 80018fc:	d527      	bpl.n	800194e <__ssputs_r+0x8e>
 80018fe:	4629      	mov	r1, r5
 8001900:	f7ff ff52 	bl	80017a8 <_malloc_r>
 8001904:	4606      	mov	r6, r0
 8001906:	b360      	cbz	r0, 8001962 <__ssputs_r+0xa2>
 8001908:	464a      	mov	r2, r9
 800190a:	6921      	ldr	r1, [r4, #16]
 800190c:	f000 faf8 	bl	8001f00 <memcpy>
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800191a:	81a3      	strh	r3, [r4, #12]
 800191c:	6126      	str	r6, [r4, #16]
 800191e:	444e      	add	r6, r9
 8001920:	6165      	str	r5, [r4, #20]
 8001922:	eba5 0509 	sub.w	r5, r5, r9
 8001926:	6026      	str	r6, [r4, #0]
 8001928:	463e      	mov	r6, r7
 800192a:	60a5      	str	r5, [r4, #8]
 800192c:	42be      	cmp	r6, r7
 800192e:	d900      	bls.n	8001932 <__ssputs_r+0x72>
 8001930:	463e      	mov	r6, r7
 8001932:	4632      	mov	r2, r6
 8001934:	4641      	mov	r1, r8
 8001936:	6820      	ldr	r0, [r4, #0]
 8001938:	f000 faaa 	bl	8001e90 <memmove>
 800193c:	68a3      	ldr	r3, [r4, #8]
 800193e:	2000      	movs	r0, #0
 8001940:	1b9b      	subs	r3, r3, r6
 8001942:	60a3      	str	r3, [r4, #8]
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	4433      	add	r3, r6
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194e:	462a      	mov	r2, r5
 8001950:	f000 fae3 	bl	8001f1a <_realloc_r>
 8001954:	4606      	mov	r6, r0
 8001956:	2800      	cmp	r0, #0
 8001958:	d1e0      	bne.n	800191c <__ssputs_r+0x5c>
 800195a:	6921      	ldr	r1, [r4, #16]
 800195c:	4650      	mov	r0, sl
 800195e:	f7ff feb7 	bl	80016d0 <_free_r>
 8001962:	230c      	movs	r3, #12
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f8ca 3000 	str.w	r3, [sl]
 800196c:	89a3      	ldrh	r3, [r4, #12]
 800196e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001972:	81a3      	strh	r3, [r4, #12]
 8001974:	e7e9      	b.n	800194a <__ssputs_r+0x8a>
	...

08001978 <_svfiprintf_r>:
 8001978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197c:	4698      	mov	r8, r3
 800197e:	898b      	ldrh	r3, [r1, #12]
 8001980:	b09d      	sub	sp, #116	@ 0x74
 8001982:	4607      	mov	r7, r0
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	460d      	mov	r5, r1
 8001988:	4614      	mov	r4, r2
 800198a:	d510      	bpl.n	80019ae <_svfiprintf_r+0x36>
 800198c:	690b      	ldr	r3, [r1, #16]
 800198e:	b973      	cbnz	r3, 80019ae <_svfiprintf_r+0x36>
 8001990:	2140      	movs	r1, #64	@ 0x40
 8001992:	f7ff ff09 	bl	80017a8 <_malloc_r>
 8001996:	6028      	str	r0, [r5, #0]
 8001998:	6128      	str	r0, [r5, #16]
 800199a:	b930      	cbnz	r0, 80019aa <_svfiprintf_r+0x32>
 800199c:	230c      	movs	r3, #12
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	b01d      	add	sp, #116	@ 0x74
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019aa:	2340      	movs	r3, #64	@ 0x40
 80019ac:	616b      	str	r3, [r5, #20]
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80019b4:	f04f 0901 	mov.w	r9, #1
 80019b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8001b5c <_svfiprintf_r+0x1e4>
 80019bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80019be:	2320      	movs	r3, #32
 80019c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019c4:	2330      	movs	r3, #48	@ 0x30
 80019c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019ca:	4623      	mov	r3, r4
 80019cc:	469a      	mov	sl, r3
 80019ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019d2:	b10a      	cbz	r2, 80019d8 <_svfiprintf_r+0x60>
 80019d4:	2a25      	cmp	r2, #37	@ 0x25
 80019d6:	d1f9      	bne.n	80019cc <_svfiprintf_r+0x54>
 80019d8:	ebba 0b04 	subs.w	fp, sl, r4
 80019dc:	d00b      	beq.n	80019f6 <_svfiprintf_r+0x7e>
 80019de:	465b      	mov	r3, fp
 80019e0:	4622      	mov	r2, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	4638      	mov	r0, r7
 80019e6:	f7ff ff6b 	bl	80018c0 <__ssputs_r>
 80019ea:	3001      	adds	r0, #1
 80019ec:	f000 80a7 	beq.w	8001b3e <_svfiprintf_r+0x1c6>
 80019f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019f2:	445a      	add	r2, fp
 80019f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80019f6:	f89a 3000 	ldrb.w	r3, [sl]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 809f 	beq.w	8001b3e <_svfiprintf_r+0x1c6>
 8001a00:	2300      	movs	r3, #0
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	f10a 0a01 	add.w	sl, sl, #1
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	9307      	str	r3, [sp, #28]
 8001a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a18:	4654      	mov	r4, sl
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	484f      	ldr	r0, [pc, #316]	@ (8001b5c <_svfiprintf_r+0x1e4>)
 8001a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a22:	f000 fa5f 	bl	8001ee4 <memchr>
 8001a26:	9a04      	ldr	r2, [sp, #16]
 8001a28:	b9d8      	cbnz	r0, 8001a62 <_svfiprintf_r+0xea>
 8001a2a:	06d0      	lsls	r0, r2, #27
 8001a2c:	bf44      	itt	mi
 8001a2e:	2320      	movmi	r3, #32
 8001a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a34:	0711      	lsls	r1, r2, #28
 8001a36:	bf44      	itt	mi
 8001a38:	232b      	movmi	r3, #43	@ 0x2b
 8001a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a44:	d015      	beq.n	8001a72 <_svfiprintf_r+0xfa>
 8001a46:	9a07      	ldr	r2, [sp, #28]
 8001a48:	4654      	mov	r4, sl
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f04f 0c0a 	mov.w	ip, #10
 8001a50:	4621      	mov	r1, r4
 8001a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a56:	3b30      	subs	r3, #48	@ 0x30
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d94b      	bls.n	8001af4 <_svfiprintf_r+0x17c>
 8001a5c:	b1b0      	cbz	r0, 8001a8c <_svfiprintf_r+0x114>
 8001a5e:	9207      	str	r2, [sp, #28]
 8001a60:	e014      	b.n	8001a8c <_svfiprintf_r+0x114>
 8001a62:	eba0 0308 	sub.w	r3, r0, r8
 8001a66:	46a2      	mov	sl, r4
 8001a68:	fa09 f303 	lsl.w	r3, r9, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	9304      	str	r3, [sp, #16]
 8001a70:	e7d2      	b.n	8001a18 <_svfiprintf_r+0xa0>
 8001a72:	9b03      	ldr	r3, [sp, #12]
 8001a74:	1d19      	adds	r1, r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	9103      	str	r1, [sp, #12]
 8001a7c:	bfbb      	ittet	lt
 8001a7e:	425b      	neglt	r3, r3
 8001a80:	f042 0202 	orrlt.w	r2, r2, #2
 8001a84:	9307      	strge	r3, [sp, #28]
 8001a86:	9307      	strlt	r3, [sp, #28]
 8001a88:	bfb8      	it	lt
 8001a8a:	9204      	strlt	r2, [sp, #16]
 8001a8c:	7823      	ldrb	r3, [r4, #0]
 8001a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a90:	d10a      	bne.n	8001aa8 <_svfiprintf_r+0x130>
 8001a92:	7863      	ldrb	r3, [r4, #1]
 8001a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a96:	d132      	bne.n	8001afe <_svfiprintf_r+0x186>
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	3402      	adds	r4, #2
 8001a9c:	1d1a      	adds	r2, r3, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001aa4:	9203      	str	r2, [sp, #12]
 8001aa6:	9305      	str	r3, [sp, #20]
 8001aa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b6c <_svfiprintf_r+0x1f4>
 8001aac:	2203      	movs	r2, #3
 8001aae:	7821      	ldrb	r1, [r4, #0]
 8001ab0:	4650      	mov	r0, sl
 8001ab2:	f000 fa17 	bl	8001ee4 <memchr>
 8001ab6:	b138      	cbz	r0, 8001ac8 <_svfiprintf_r+0x150>
 8001ab8:	eba0 000a 	sub.w	r0, r0, sl
 8001abc:	2240      	movs	r2, #64	@ 0x40
 8001abe:	9b04      	ldr	r3, [sp, #16]
 8001ac0:	3401      	adds	r4, #1
 8001ac2:	4082      	lsls	r2, r0
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001acc:	2206      	movs	r2, #6
 8001ace:	4824      	ldr	r0, [pc, #144]	@ (8001b60 <_svfiprintf_r+0x1e8>)
 8001ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ad4:	f000 fa06 	bl	8001ee4 <memchr>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d036      	beq.n	8001b4a <_svfiprintf_r+0x1d2>
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <_svfiprintf_r+0x1ec>)
 8001ade:	bb1b      	cbnz	r3, 8001b28 <_svfiprintf_r+0x1b0>
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	3307      	adds	r3, #7
 8001ae4:	f023 0307 	bic.w	r3, r3, #7
 8001ae8:	3308      	adds	r3, #8
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001aee:	4433      	add	r3, r6
 8001af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001af2:	e76a      	b.n	80019ca <_svfiprintf_r+0x52>
 8001af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001af8:	460c      	mov	r4, r1
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7a8      	b.n	8001a50 <_svfiprintf_r+0xd8>
 8001afe:	2300      	movs	r3, #0
 8001b00:	3401      	adds	r4, #1
 8001b02:	f04f 0c0a 	mov.w	ip, #10
 8001b06:	4619      	mov	r1, r3
 8001b08:	9305      	str	r3, [sp, #20]
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b10:	3a30      	subs	r2, #48	@ 0x30
 8001b12:	2a09      	cmp	r2, #9
 8001b14:	d903      	bls.n	8001b1e <_svfiprintf_r+0x1a6>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0c6      	beq.n	8001aa8 <_svfiprintf_r+0x130>
 8001b1a:	9105      	str	r1, [sp, #20]
 8001b1c:	e7c4      	b.n	8001aa8 <_svfiprintf_r+0x130>
 8001b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b22:	4604      	mov	r4, r0
 8001b24:	2301      	movs	r3, #1
 8001b26:	e7f0      	b.n	8001b0a <_svfiprintf_r+0x192>
 8001b28:	ab03      	add	r3, sp, #12
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	a904      	add	r1, sp, #16
 8001b2e:	4638      	mov	r0, r7
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <_svfiprintf_r+0x1f0>)
 8001b34:	f3af 8000 	nop.w
 8001b38:	1c42      	adds	r2, r0, #1
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	d1d6      	bne.n	8001aec <_svfiprintf_r+0x174>
 8001b3e:	89ab      	ldrh	r3, [r5, #12]
 8001b40:	065b      	lsls	r3, r3, #25
 8001b42:	f53f af2d 	bmi.w	80019a0 <_svfiprintf_r+0x28>
 8001b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b48:	e72c      	b.n	80019a4 <_svfiprintf_r+0x2c>
 8001b4a:	ab03      	add	r3, sp, #12
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	a904      	add	r1, sp, #16
 8001b50:	4638      	mov	r0, r7
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <_svfiprintf_r+0x1f0>)
 8001b56:	f000 f87d 	bl	8001c54 <_printf_i>
 8001b5a:	e7ed      	b.n	8001b38 <_svfiprintf_r+0x1c0>
 8001b5c:	08002068 	.word	0x08002068
 8001b60:	08002072 	.word	0x08002072
 8001b64:	00000000 	.word	0x00000000
 8001b68:	080018c1 	.word	0x080018c1
 8001b6c:	0800206e 	.word	0x0800206e

08001b70 <_printf_common>:
 8001b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b74:	4616      	mov	r6, r2
 8001b76:	4698      	mov	r8, r3
 8001b78:	688a      	ldr	r2, [r1, #8]
 8001b7a:	4607      	mov	r7, r0
 8001b7c:	690b      	ldr	r3, [r1, #16]
 8001b7e:	460c      	mov	r4, r1
 8001b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bfb8      	it	lt
 8001b88:	4613      	movlt	r3, r2
 8001b8a:	6033      	str	r3, [r6, #0]
 8001b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b90:	b10a      	cbz	r2, 8001b96 <_printf_common+0x26>
 8001b92:	3301      	adds	r3, #1
 8001b94:	6033      	str	r3, [r6, #0]
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	0699      	lsls	r1, r3, #26
 8001b9a:	bf42      	ittt	mi
 8001b9c:	6833      	ldrmi	r3, [r6, #0]
 8001b9e:	3302      	addmi	r3, #2
 8001ba0:	6033      	strmi	r3, [r6, #0]
 8001ba2:	6825      	ldr	r5, [r4, #0]
 8001ba4:	f015 0506 	ands.w	r5, r5, #6
 8001ba8:	d106      	bne.n	8001bb8 <_printf_common+0x48>
 8001baa:	f104 0a19 	add.w	sl, r4, #25
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	6832      	ldr	r2, [r6, #0]
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	42ab      	cmp	r3, r5
 8001bb6:	dc2b      	bgt.n	8001c10 <_printf_common+0xa0>
 8001bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	3b00      	subs	r3, #0
 8001bc0:	bf18      	it	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	0692      	lsls	r2, r2, #26
 8001bc6:	d430      	bmi.n	8001c2a <_printf_common+0xba>
 8001bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bcc:	4641      	mov	r1, r8
 8001bce:	4638      	mov	r0, r7
 8001bd0:	47c8      	blx	r9
 8001bd2:	3001      	adds	r0, #1
 8001bd4:	d023      	beq.n	8001c1e <_printf_common+0xae>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	341a      	adds	r4, #26
 8001bda:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8001bde:	f003 0306 	and.w	r3, r3, #6
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf0a      	itet	eq
 8001be6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8001bea:	2500      	movne	r5, #0
 8001bec:	6833      	ldreq	r3, [r6, #0]
 8001bee:	f04f 0600 	mov.w	r6, #0
 8001bf2:	bf08      	it	eq
 8001bf4:	1aed      	subeq	r5, r5, r3
 8001bf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001bfa:	bf08      	it	eq
 8001bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bfc4      	itt	gt
 8001c04:	1a9b      	subgt	r3, r3, r2
 8001c06:	18ed      	addgt	r5, r5, r3
 8001c08:	42b5      	cmp	r5, r6
 8001c0a:	d11a      	bne.n	8001c42 <_printf_common+0xd2>
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e008      	b.n	8001c22 <_printf_common+0xb2>
 8001c10:	2301      	movs	r3, #1
 8001c12:	4652      	mov	r2, sl
 8001c14:	4641      	mov	r1, r8
 8001c16:	4638      	mov	r0, r7
 8001c18:	47c8      	blx	r9
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	d103      	bne.n	8001c26 <_printf_common+0xb6>
 8001c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c26:	3501      	adds	r5, #1
 8001c28:	e7c1      	b.n	8001bae <_printf_common+0x3e>
 8001c2a:	18e1      	adds	r1, r4, r3
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	2030      	movs	r0, #48	@ 0x30
 8001c30:	3302      	adds	r3, #2
 8001c32:	4422      	add	r2, r4
 8001c34:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c40:	e7c2      	b.n	8001bc8 <_printf_common+0x58>
 8001c42:	2301      	movs	r3, #1
 8001c44:	4622      	mov	r2, r4
 8001c46:	4641      	mov	r1, r8
 8001c48:	4638      	mov	r0, r7
 8001c4a:	47c8      	blx	r9
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	d0e6      	beq.n	8001c1e <_printf_common+0xae>
 8001c50:	3601      	adds	r6, #1
 8001c52:	e7d9      	b.n	8001c08 <_printf_common+0x98>

08001c54 <_printf_i>:
 8001c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c58:	7e0f      	ldrb	r7, [r1, #24]
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	4680      	mov	r8, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	2f78      	cmp	r7, #120	@ 0x78
 8001c62:	469a      	mov	sl, r3
 8001c64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c6a:	d807      	bhi.n	8001c7c <_printf_i+0x28>
 8001c6c:	2f62      	cmp	r7, #98	@ 0x62
 8001c6e:	d80a      	bhi.n	8001c86 <_printf_i+0x32>
 8001c70:	2f00      	cmp	r7, #0
 8001c72:	f000 80d1 	beq.w	8001e18 <_printf_i+0x1c4>
 8001c76:	2f58      	cmp	r7, #88	@ 0x58
 8001c78:	f000 80b8 	beq.w	8001dec <_printf_i+0x198>
 8001c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c84:	e03a      	b.n	8001cfc <_printf_i+0xa8>
 8001c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c8a:	2b15      	cmp	r3, #21
 8001c8c:	d8f6      	bhi.n	8001c7c <_printf_i+0x28>
 8001c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8001c94 <_printf_i+0x40>)
 8001c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c94:	08001ced 	.word	0x08001ced
 8001c98:	08001d01 	.word	0x08001d01
 8001c9c:	08001c7d 	.word	0x08001c7d
 8001ca0:	08001c7d 	.word	0x08001c7d
 8001ca4:	08001c7d 	.word	0x08001c7d
 8001ca8:	08001c7d 	.word	0x08001c7d
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001c7d 	.word	0x08001c7d
 8001cb4:	08001c7d 	.word	0x08001c7d
 8001cb8:	08001c7d 	.word	0x08001c7d
 8001cbc:	08001c7d 	.word	0x08001c7d
 8001cc0:	08001dff 	.word	0x08001dff
 8001cc4:	08001d2b 	.word	0x08001d2b
 8001cc8:	08001db9 	.word	0x08001db9
 8001ccc:	08001c7d 	.word	0x08001c7d
 8001cd0:	08001c7d 	.word	0x08001c7d
 8001cd4:	08001e21 	.word	0x08001e21
 8001cd8:	08001c7d 	.word	0x08001c7d
 8001cdc:	08001d2b 	.word	0x08001d2b
 8001ce0:	08001c7d 	.word	0x08001c7d
 8001ce4:	08001c7d 	.word	0x08001c7d
 8001ce8:	08001dc1 	.word	0x08001dc1
 8001cec:	6833      	ldr	r3, [r6, #0]
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6032      	str	r2, [r6, #0]
 8001cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e09c      	b.n	8001e3a <_printf_i+0x1e6>
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	6820      	ldr	r0, [r4, #0]
 8001d04:	1d19      	adds	r1, r3, #4
 8001d06:	6031      	str	r1, [r6, #0]
 8001d08:	0606      	lsls	r6, r0, #24
 8001d0a:	d501      	bpl.n	8001d10 <_printf_i+0xbc>
 8001d0c:	681d      	ldr	r5, [r3, #0]
 8001d0e:	e003      	b.n	8001d18 <_printf_i+0xc4>
 8001d10:	0645      	lsls	r5, r0, #25
 8001d12:	d5fb      	bpl.n	8001d0c <_printf_i+0xb8>
 8001d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	da03      	bge.n	8001d24 <_printf_i+0xd0>
 8001d1c:	232d      	movs	r3, #45	@ 0x2d
 8001d1e:	426d      	negs	r5, r5
 8001d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d24:	4858      	ldr	r0, [pc, #352]	@ (8001e88 <_printf_i+0x234>)
 8001d26:	230a      	movs	r3, #10
 8001d28:	e011      	b.n	8001d4e <_printf_i+0xfa>
 8001d2a:	6821      	ldr	r1, [r4, #0]
 8001d2c:	6833      	ldr	r3, [r6, #0]
 8001d2e:	0608      	lsls	r0, r1, #24
 8001d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d34:	d402      	bmi.n	8001d3c <_printf_i+0xe8>
 8001d36:	0649      	lsls	r1, r1, #25
 8001d38:	bf48      	it	mi
 8001d3a:	b2ad      	uxthmi	r5, r5
 8001d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d3e:	6033      	str	r3, [r6, #0]
 8001d40:	4851      	ldr	r0, [pc, #324]	@ (8001e88 <_printf_i+0x234>)
 8001d42:	bf14      	ite	ne
 8001d44:	230a      	movne	r3, #10
 8001d46:	2308      	moveq	r3, #8
 8001d48:	2100      	movs	r1, #0
 8001d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d4e:	6866      	ldr	r6, [r4, #4]
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	60a6      	str	r6, [r4, #8]
 8001d54:	db05      	blt.n	8001d62 <_printf_i+0x10e>
 8001d56:	6821      	ldr	r1, [r4, #0]
 8001d58:	432e      	orrs	r6, r5
 8001d5a:	f021 0104 	bic.w	r1, r1, #4
 8001d5e:	6021      	str	r1, [r4, #0]
 8001d60:	d04b      	beq.n	8001dfa <_printf_i+0x1a6>
 8001d62:	4616      	mov	r6, r2
 8001d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d68:	fb03 5711 	mls	r7, r3, r1, r5
 8001d6c:	5dc7      	ldrb	r7, [r0, r7]
 8001d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d72:	462f      	mov	r7, r5
 8001d74:	460d      	mov	r5, r1
 8001d76:	42bb      	cmp	r3, r7
 8001d78:	d9f4      	bls.n	8001d64 <_printf_i+0x110>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d10b      	bne.n	8001d96 <_printf_i+0x142>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	07df      	lsls	r7, r3, #31
 8001d82:	d508      	bpl.n	8001d96 <_printf_i+0x142>
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	6861      	ldr	r1, [r4, #4]
 8001d88:	4299      	cmp	r1, r3
 8001d8a:	bfde      	ittt	le
 8001d8c:	2330      	movle	r3, #48	@ 0x30
 8001d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d96:	1b92      	subs	r2, r2, r6
 8001d98:	6122      	str	r2, [r4, #16]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	aa03      	add	r2, sp, #12
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4640      	mov	r0, r8
 8001da2:	f8cd a000 	str.w	sl, [sp]
 8001da6:	f7ff fee3 	bl	8001b70 <_printf_common>
 8001daa:	3001      	adds	r0, #1
 8001dac:	d14a      	bne.n	8001e44 <_printf_i+0x1f0>
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	b004      	add	sp, #16
 8001db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6023      	str	r3, [r4, #0]
 8001dc0:	2778      	movs	r7, #120	@ 0x78
 8001dc2:	4832      	ldr	r0, [pc, #200]	@ (8001e8c <_printf_i+0x238>)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001dca:	061f      	lsls	r7, r3, #24
 8001dcc:	6831      	ldr	r1, [r6, #0]
 8001dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8001dd2:	d402      	bmi.n	8001dda <_printf_i+0x186>
 8001dd4:	065f      	lsls	r7, r3, #25
 8001dd6:	bf48      	it	mi
 8001dd8:	b2ad      	uxthmi	r5, r5
 8001dda:	6031      	str	r1, [r6, #0]
 8001ddc:	07d9      	lsls	r1, r3, #31
 8001dde:	bf44      	itt	mi
 8001de0:	f043 0320 	orrmi.w	r3, r3, #32
 8001de4:	6023      	strmi	r3, [r4, #0]
 8001de6:	b11d      	cbz	r5, 8001df0 <_printf_i+0x19c>
 8001de8:	2310      	movs	r3, #16
 8001dea:	e7ad      	b.n	8001d48 <_printf_i+0xf4>
 8001dec:	4826      	ldr	r0, [pc, #152]	@ (8001e88 <_printf_i+0x234>)
 8001dee:	e7e9      	b.n	8001dc4 <_printf_i+0x170>
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	f023 0320 	bic.w	r3, r3, #32
 8001df6:	6023      	str	r3, [r4, #0]
 8001df8:	e7f6      	b.n	8001de8 <_printf_i+0x194>
 8001dfa:	4616      	mov	r6, r2
 8001dfc:	e7bd      	b.n	8001d7a <_printf_i+0x126>
 8001dfe:	6833      	ldr	r3, [r6, #0]
 8001e00:	6825      	ldr	r5, [r4, #0]
 8001e02:	1d18      	adds	r0, r3, #4
 8001e04:	6961      	ldr	r1, [r4, #20]
 8001e06:	6030      	str	r0, [r6, #0]
 8001e08:	062e      	lsls	r6, r5, #24
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	d501      	bpl.n	8001e12 <_printf_i+0x1be>
 8001e0e:	6019      	str	r1, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <_printf_i+0x1c4>
 8001e12:	0668      	lsls	r0, r5, #25
 8001e14:	d5fb      	bpl.n	8001e0e <_printf_i+0x1ba>
 8001e16:	8019      	strh	r1, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4616      	mov	r6, r2
 8001e1c:	6123      	str	r3, [r4, #16]
 8001e1e:	e7bc      	b.n	8001d9a <_printf_i+0x146>
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	2100      	movs	r1, #0
 8001e24:	1d1a      	adds	r2, r3, #4
 8001e26:	6032      	str	r2, [r6, #0]
 8001e28:	681e      	ldr	r6, [r3, #0]
 8001e2a:	6862      	ldr	r2, [r4, #4]
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f000 f859 	bl	8001ee4 <memchr>
 8001e32:	b108      	cbz	r0, 8001e38 <_printf_i+0x1e4>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	6060      	str	r0, [r4, #4]
 8001e38:	6863      	ldr	r3, [r4, #4]
 8001e3a:	6123      	str	r3, [r4, #16]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e42:	e7aa      	b.n	8001d9a <_printf_i+0x146>
 8001e44:	6923      	ldr	r3, [r4, #16]
 8001e46:	4632      	mov	r2, r6
 8001e48:	4649      	mov	r1, r9
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	47d0      	blx	sl
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d0ad      	beq.n	8001dae <_printf_i+0x15a>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	079b      	lsls	r3, r3, #30
 8001e56:	d413      	bmi.n	8001e80 <_printf_i+0x22c>
 8001e58:	68e0      	ldr	r0, [r4, #12]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	bfb8      	it	lt
 8001e60:	4618      	movlt	r0, r3
 8001e62:	e7a6      	b.n	8001db2 <_printf_i+0x15e>
 8001e64:	2301      	movs	r3, #1
 8001e66:	4632      	mov	r2, r6
 8001e68:	4649      	mov	r1, r9
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	47d0      	blx	sl
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d09d      	beq.n	8001dae <_printf_i+0x15a>
 8001e72:	3501      	adds	r5, #1
 8001e74:	68e3      	ldr	r3, [r4, #12]
 8001e76:	9903      	ldr	r1, [sp, #12]
 8001e78:	1a5b      	subs	r3, r3, r1
 8001e7a:	42ab      	cmp	r3, r5
 8001e7c:	dcf2      	bgt.n	8001e64 <_printf_i+0x210>
 8001e7e:	e7eb      	b.n	8001e58 <_printf_i+0x204>
 8001e80:	2500      	movs	r5, #0
 8001e82:	f104 0619 	add.w	r6, r4, #25
 8001e86:	e7f5      	b.n	8001e74 <_printf_i+0x220>
 8001e88:	08002079 	.word	0x08002079
 8001e8c:	0800208a 	.word	0x0800208a

08001e90 <memmove>:
 8001e90:	4288      	cmp	r0, r1
 8001e92:	b510      	push	{r4, lr}
 8001e94:	eb01 0402 	add.w	r4, r1, r2
 8001e98:	d902      	bls.n	8001ea0 <memmove+0x10>
 8001e9a:	4284      	cmp	r4, r0
 8001e9c:	4623      	mov	r3, r4
 8001e9e:	d807      	bhi.n	8001eb0 <memmove+0x20>
 8001ea0:	1e43      	subs	r3, r0, #1
 8001ea2:	42a1      	cmp	r1, r4
 8001ea4:	d008      	beq.n	8001eb8 <memmove+0x28>
 8001ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001eae:	e7f8      	b.n	8001ea2 <memmove+0x12>
 8001eb0:	4402      	add	r2, r0
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	428a      	cmp	r2, r1
 8001eb6:	d100      	bne.n	8001eba <memmove+0x2a>
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ec2:	e7f7      	b.n	8001eb4 <memmove+0x24>

08001ec4 <_sbrk_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	4d05      	ldr	r5, [pc, #20]	@ (8001ee0 <_sbrk_r+0x1c>)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	4608      	mov	r0, r1
 8001ece:	602b      	str	r3, [r5, #0]
 8001ed0:	f7ff fa96 	bl	8001400 <_sbrk>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_sbrk_r+0x1a>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_sbrk_r+0x1a>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	200003cc 	.word	0x200003cc

08001ee4 <memchr>:
 8001ee4:	b2c9      	uxtb	r1, r1
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4402      	add	r2, r0
 8001eea:	b510      	push	{r4, lr}
 8001eec:	4293      	cmp	r3, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	d101      	bne.n	8001ef6 <memchr+0x12>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	e003      	b.n	8001efe <memchr+0x1a>
 8001ef6:	7804      	ldrb	r4, [r0, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d1f6      	bne.n	8001eec <memchr+0x8>
 8001efe:	bd10      	pop	{r4, pc}

08001f00 <memcpy>:
 8001f00:	440a      	add	r2, r1
 8001f02:	1e43      	subs	r3, r0, #1
 8001f04:	4291      	cmp	r1, r2
 8001f06:	d100      	bne.n	8001f0a <memcpy+0xa>
 8001f08:	4770      	bx	lr
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f10:	4291      	cmp	r1, r2
 8001f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f16:	d1f9      	bne.n	8001f0c <memcpy+0xc>
 8001f18:	bd10      	pop	{r4, pc}

08001f1a <_realloc_r>:
 8001f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1e:	4607      	mov	r7, r0
 8001f20:	4614      	mov	r4, r2
 8001f22:	460d      	mov	r5, r1
 8001f24:	b921      	cbnz	r1, 8001f30 <_realloc_r+0x16>
 8001f26:	4611      	mov	r1, r2
 8001f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	f7ff bc3c 	b.w	80017a8 <_malloc_r>
 8001f30:	b92a      	cbnz	r2, 8001f3e <_realloc_r+0x24>
 8001f32:	4625      	mov	r5, r4
 8001f34:	f7ff fbcc 	bl	80016d0 <_free_r>
 8001f38:	4628      	mov	r0, r5
 8001f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f3e:	f000 f81a 	bl	8001f76 <_malloc_usable_size_r>
 8001f42:	4284      	cmp	r4, r0
 8001f44:	4606      	mov	r6, r0
 8001f46:	d802      	bhi.n	8001f4e <_realloc_r+0x34>
 8001f48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f4c:	d8f4      	bhi.n	8001f38 <_realloc_r+0x1e>
 8001f4e:	4621      	mov	r1, r4
 8001f50:	4638      	mov	r0, r7
 8001f52:	f7ff fc29 	bl	80017a8 <_malloc_r>
 8001f56:	4680      	mov	r8, r0
 8001f58:	b908      	cbnz	r0, 8001f5e <_realloc_r+0x44>
 8001f5a:	4645      	mov	r5, r8
 8001f5c:	e7ec      	b.n	8001f38 <_realloc_r+0x1e>
 8001f5e:	42b4      	cmp	r4, r6
 8001f60:	4622      	mov	r2, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	bf28      	it	cs
 8001f66:	4632      	movcs	r2, r6
 8001f68:	f7ff ffca 	bl	8001f00 <memcpy>
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4638      	mov	r0, r7
 8001f70:	f7ff fbae 	bl	80016d0 <_free_r>
 8001f74:	e7f1      	b.n	8001f5a <_realloc_r+0x40>

08001f76 <_malloc_usable_size_r>:
 8001f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f7a:	1f18      	subs	r0, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfbc      	itt	lt
 8001f80:	580b      	ldrlt	r3, [r1, r0]
 8001f82:	18c0      	addlt	r0, r0, r3
 8001f84:	4770      	bx	lr
	...

08001f88 <_init>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr

08001f94 <_fini>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr
